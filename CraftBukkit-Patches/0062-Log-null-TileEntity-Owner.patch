From 37e970e0efad76c153d5121a51a40e61a13eddbd Mon Sep 17 00:00:00 2001
From: md_5 <git@md-5.net>
Date: Sun, 20 Apr 2014 11:16:54 +1000
Subject: [PATCH] Log null TileEntity Owner


diff --git a/src/main/java/net/minecraft/server/TileEntity.java b/src/main/java/net/minecraft/server/TileEntity.java
new file mode 100644
index 00000000..24ca18ac
--- /dev/null
+++ b/src/main/java/net/minecraft/server/TileEntity.java
@@ -0,0 +1,193 @@
+package net.minecraft.server;
+
+import javax.annotation.Nullable;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+// CraftBukkit start
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
+import org.bukkit.inventory.InventoryHolder;
+// CraftBukkit end
+import org.spigotmc.CustomTimingsHandler; // Spigot
+
+public abstract class TileEntity {
+
+    public CustomTimingsHandler tickTimer = org.bukkit.craftbukkit.SpigotTimings.getTileEntityTimings(this); // Spigot
+    // CraftBukkit start - data containers
+    private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
+    public CraftPersistentDataContainer persistentDataContainer;
+    // CraftBukkit end
+    private static final Logger LOGGER = LogManager.getLogger();
+    private final TileEntityTypes<?> tileType;
+    @Nullable
+    protected World world;
+    public BlockPosition position; // CraftBukkit - remove final, protected -> public
+    protected boolean f;
+    private IBlockData c;
+
+    public TileEntity(TileEntityTypes<?> tileentitytypes, BlockPosition blockposition, IBlockData iblockdata) {
+        this.tileType = tileentitytypes;
+        this.position = blockposition.immutableCopy();
+        this.c = iblockdata;
+    }
+
+    @Nullable
+    public World getWorld() {
+        return this.world;
+    }
+
+    public void setWorld(World world) {
+        this.world = world;
+    }
+
+    public boolean hasWorld() {
+        return this.world != null;
+    }
+
+    public void load(NBTTagCompound nbttagcompound) {
+        this.position = new BlockPosition(nbttagcompound.getInt("x"), nbttagcompound.getInt("y"), nbttagcompound.getInt("z")); // CraftBukkit - read position from nbt
+        // CraftBukkit start - read container
+        this.persistentDataContainer = new CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
+
+        NBTBase persistentDataTag = nbttagcompound.get("PublicBukkitValues");
+        if (persistentDataTag instanceof NBTTagCompound) {
+            this.persistentDataContainer.putAll((NBTTagCompound) persistentDataTag);
+        }
+        // CraftBukkit end
+    }
+
+    public NBTTagCompound save(NBTTagCompound nbttagcompound) {
+        return this.c(nbttagcompound);
+    }
+
+    private NBTTagCompound c(NBTTagCompound nbttagcompound) {
+        MinecraftKey minecraftkey = TileEntityTypes.a(this.getTileType());
+
+        if (minecraftkey == null) {
+            throw new RuntimeException(this.getClass() + " is missing a mapping! This is a bug!");
+        } else {
+            nbttagcompound.setString("id", minecraftkey.toString());
+            nbttagcompound.setInt("x", this.position.getX());
+            nbttagcompound.setInt("y", this.position.getY());
+            nbttagcompound.setInt("z", this.position.getZ());
+            // CraftBukkit start - store container
+            if (this.persistentDataContainer != null && !this.persistentDataContainer.isEmpty()) {
+                nbttagcompound.set("PublicBukkitValues", this.persistentDataContainer.toTagCompound());
+            }
+            // CraftBukkit end
+            return nbttagcompound;
+        }
+    }
+
+    @Nullable
+    public static TileEntity create(BlockPosition blockposition, IBlockData iblockdata, NBTTagCompound nbttagcompound) {
+        String s = nbttagcompound.getString("id");
+
+        return (TileEntity) IRegistry.BLOCK_ENTITY_TYPE.getOptional(new MinecraftKey(s)).map((tileentitytypes) -> {
+            try {
+                return tileentitytypes.a(blockposition, iblockdata);
+            } catch (Throwable throwable) {
+                TileEntity.LOGGER.error("Failed to create block entity {}", s, throwable);
+                return null;
+            }
+        }).map((tileentity) -> {
+            try {
+                tileentity.load(nbttagcompound);
+                return tileentity;
+            } catch (Throwable throwable) {
+                TileEntity.LOGGER.error("Failed to load data for block entity {}", s, throwable);
+                return null;
+            }
+        }).orElseGet(() -> {
+            TileEntity.LOGGER.warn("Skipping BlockEntity with id {}", s);
+            return null;
+        });
+    }
+
+    public void update() {
+        if (this.world != null) {
+            a(this.world, this.position, this.c);
+        }
+
+    }
+
+    protected static void a(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        world.removeTileEntity(blockposition);
+        if (!iblockdata.isAir()) {
+            world.updateAdjacentComparators(blockposition, iblockdata.getBlock());
+        }
+
+    }
+
+    public BlockPosition getPosition() {
+        return this.position;
+    }
+
+    public IBlockData getBlock() {
+        return this.c;
+    }
+
+    @Nullable
+    public PacketPlayOutTileEntityData getUpdatePacket() {
+        return null;
+    }
+
+    public NBTTagCompound b() {
+        return this.c(new NBTTagCompound());
+    }
+
+    public boolean isRemoved() {
+        return this.f;
+    }
+
+    public void ap_() {
+        this.f = true;
+    }
+
+    public void q() {
+        this.f = false;
+    }
+
+    public boolean setProperty(int i, int j) {
+        return false;
+    }
+
+    public void a(CrashReportSystemDetails crashreportsystemdetails) {
+        crashreportsystemdetails.a("Name", () -> {
+            return IRegistry.BLOCK_ENTITY_TYPE.getKey(this.getTileType()) + " // " + this.getClass().getCanonicalName();
+        });
+        if (this.world != null) {
+            CrashReportSystemDetails.a(crashreportsystemdetails, this.world, this.position, this.getBlock());
+            CrashReportSystemDetails.a(crashreportsystemdetails, this.world, this.position, this.world.getType(this.position));
+        }
+    }
+
+    public boolean isFilteredNBT() {
+        return false;
+    }
+
+    public TileEntityTypes<?> getTileType() {
+        return this.tileType;
+    }
+
+    @Deprecated
+    public void b(IBlockData iblockdata) {
+        this.c = iblockdata;
+    }
+
+    // CraftBukkit start - add method
+    public InventoryHolder getOwner() {
+        if (world == null) return null;
+        // Spigot start
+        org.bukkit.block.Block block = world.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ());
+        if (block == null) {
+            org.bukkit.Bukkit.getLogger().log(java.util.logging.Level.WARNING, "No block for owner at %s %d %d %d", new Object[]{world.getWorld(), position.getX(), position.getY(), position.getZ()});
+            return null;
+        }
+        // Spigot end
+        org.bukkit.block.BlockState state = block.getState();
+        if (state instanceof InventoryHolder) return (InventoryHolder) state;
+        return null;
+    }
+    // CraftBukkit end
+}
-- 
2.21.0.windows.1

