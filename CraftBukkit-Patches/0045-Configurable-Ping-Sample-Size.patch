From 04da40a37744be26ff6e600168770ef3d9b91b66 Mon Sep 17 00:00:00 2001
From: md_5 <git@md-5.net>
Date: Sun, 26 Jan 2014 21:48:34 +1100
Subject: [PATCH] Configurable Ping Sample Size


diff --git a/src/main/java/net/minecraft/server/PacketStatusListener.java b/src/main/java/net/minecraft/server/PacketStatusListener.java
new file mode 100644
index 00000000..055555cb
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketStatusListener.java
@@ -0,0 +1,142 @@
+package net.minecraft.server;
+
+// CraftBukkit start
+import com.mojang.authlib.GameProfile;
+import java.net.InetSocketAddress;
+import java.util.Iterator;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.CraftIconCache;
+import org.bukkit.entity.Player;
+// CraftBukkit end
+
+public class PacketStatusListener implements PacketStatusInListener {
+
+    private static final IChatBaseComponent a = new ChatMessage("multiplayer.status.request_handled");
+    private final MinecraftServer minecraftServer;
+    private final NetworkManager networkManager;
+    private boolean d;
+
+    public PacketStatusListener(MinecraftServer minecraftserver, NetworkManager networkmanager) {
+        this.minecraftServer = minecraftserver;
+        this.networkManager = networkmanager;
+    }
+
+    @Override
+    public void a(IChatBaseComponent ichatbasecomponent) {}
+
+    @Override
+    public NetworkManager a() {
+        return this.networkManager;
+    }
+
+    @Override
+    public void a(PacketStatusInStart packetstatusinstart) {
+        if (this.d) {
+            this.networkManager.close(PacketStatusListener.a);
+        } else {
+            this.d = true;
+            // CraftBukkit start
+            // this.networkManager.sendPacket(new PacketStatusOutServerInfo(this.minecraftServer.getServerPing()));
+            final Object[] players = minecraftServer.getPlayerList().players.toArray();
+            class ServerListPingEvent extends org.bukkit.event.server.ServerListPingEvent {
+
+                CraftIconCache icon = minecraftServer.server.getServerIcon();
+
+                ServerListPingEvent() {
+                    super(((InetSocketAddress) networkManager.getSocketAddress()).getAddress(), minecraftServer.getMotd(), minecraftServer.getPlayerList().getMaxPlayers());
+                }
+
+                @Override
+                public void setServerIcon(org.bukkit.util.CachedServerIcon icon) {
+                    if (!(icon instanceof CraftIconCache)) {
+                        throw new IllegalArgumentException(icon + " was not created by " + org.bukkit.craftbukkit.CraftServer.class);
+                    }
+                    this.icon = (CraftIconCache) icon;
+                }
+
+                @Override
+                public Iterator<Player> iterator() throws UnsupportedOperationException {
+                    return new Iterator<Player>() {
+                        int i;
+                        int ret = Integer.MIN_VALUE;
+                        EntityPlayer player;
+
+                        @Override
+                        public boolean hasNext() {
+                            if (player != null) {
+                                return true;
+                            }
+                            final Object[] currentPlayers = players;
+                            for (int length = currentPlayers.length, i = this.i; i < length; i++) {
+                                final EntityPlayer player = (EntityPlayer) currentPlayers[i];
+                                if (player != null) {
+                                    this.i = i + 1;
+                                    this.player = player;
+                                    return true;
+                                }
+                            }
+                            return false;
+                        }
+
+                        @Override
+                        public Player next() {
+                            if (!hasNext()) {
+                                throw new java.util.NoSuchElementException();
+                            }
+                            final EntityPlayer player = this.player;
+                            this.player = null;
+                            this.ret = this.i - 1;
+                            return player.getBukkitEntity();
+                        }
+
+                        @Override
+                        public void remove() {
+                            final Object[] currentPlayers = players;
+                            final int i = this.ret;
+                            if (i < 0 || currentPlayers[i] == null) {
+                                throw new IllegalStateException();
+                            }
+                            currentPlayers[i] = null;
+                        }
+                    };
+                }
+            }
+
+            ServerListPingEvent event = new ServerListPingEvent();
+            this.minecraftServer.server.getPluginManager().callEvent(event);
+
+            java.util.List<GameProfile> profiles = new java.util.ArrayList<GameProfile>(players.length);
+            for (Object player : players) {
+                if (player != null) {
+                    profiles.add(((EntityPlayer) player).getProfile());
+                }
+            }
+
+            ServerPing.ServerPingPlayerSample playerSample = new ServerPing.ServerPingPlayerSample(event.getMaxPlayers(), profiles.size());
+            // Spigot Start
+            if ( !profiles.isEmpty() )
+            {
+                java.util.Collections.shuffle( profiles ); // This sucks, its inefficient but we have no simple way of doing it differently
+                profiles = profiles.subList( 0, Math.min( profiles.size(), org.spigotmc.SpigotConfig.playerSample ) ); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
+            }
+            // Spigot End
+            playerSample.a(profiles.toArray(new GameProfile[profiles.size()]));
+
+            ServerPing ping = new ServerPing();
+            ping.setFavicon(event.icon.value);
+            ping.setMOTD(CraftChatMessage.fromString(event.getMotd(), true)[0]);
+            ping.setPlayerSample(playerSample);
+            int version = SharedConstants.getGameVersion().getProtocolVersion();
+            ping.setServerInfo(new ServerPing.ServerData(minecraftServer.getServerModName() + " " + minecraftServer.getVersion(), version));
+
+            this.networkManager.sendPacket(new PacketStatusOutServerInfo(ping));
+        }
+        // CraftBukkit end
+    }
+
+    @Override
+    public void a(PacketStatusInPing packetstatusinping) {
+        this.networkManager.sendPacket(new PacketStatusOutPong(packetstatusinping.b()));
+        this.networkManager.close(PacketStatusListener.a);
+    }
+}
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 25b57a39..c5336070 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -271,4 +271,11 @@ public class SpigotConfig
     {
         commands.put( "tps", new TicksPerSecondCommand( "tps" ) );
     }
+
+    public static int playerSample;
+    private static void playerSample()
+    {
+        playerSample = getInt( "settings.sample-count", 12 );
+        System.out.println( "Server Ping Player Sample Count: " + playerSample );
+    }
 }
-- 
2.21.0.windows.1

