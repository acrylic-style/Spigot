From bc463a93001d044e73a47deee97e5ff2f2fe4886 Mon Sep 17 00:00:00 2001
From: Dylan Xaldin <Puremin0rez515@gmail.com>
Date: Thu, 12 Dec 2013 18:05:03 -0600
Subject: [PATCH] Allow Disabling Zombie Villager Aggression

Ability to configure if Zombies will be aggressive towards Villagers.

diff --git a/src/main/java/net/minecraft/server/EntityZombie.java b/src/main/java/net/minecraft/server/EntityZombie.java
new file mode 100644
index 00000000..702f10d9
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityZombie.java
@@ -0,0 +1,547 @@
+package net.minecraft.server;
+
+import com.mojang.serialization.DynamicOps;
+import java.time.LocalDate;
+import java.time.temporal.ChronoField;
+import java.util.List;
+import java.util.Random;
+import java.util.UUID;
+import java.util.function.Predicate;
+import javax.annotation.Nullable;
+
+// CraftBukkit start
+import org.bukkit.entity.Zombie;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTransformEvent;
+// CraftBukkit end
+
+public class EntityZombie extends EntityMonster {
+
+    private static final UUID b = UUID.fromString("B9766B59-9566-4402-BC1F-2EE2A276D836");
+    private static final AttributeModifier c = new AttributeModifier(EntityZombie.b, "Baby speed boost", 0.5D, AttributeModifier.Operation.MULTIPLY_BASE);
+    private static final DataWatcherObject<Boolean> d = DataWatcher.a(EntityZombie.class, DataWatcherRegistry.i);
+    private static final DataWatcherObject<Integer> bj = DataWatcher.a(EntityZombie.class, DataWatcherRegistry.b);
+    public static final DataWatcherObject<Boolean> DROWN_CONVERTING = DataWatcher.a(EntityZombie.class, DataWatcherRegistry.i);
+    private static final Predicate<EnumDifficulty> bl = (enumdifficulty) -> {
+        return enumdifficulty == EnumDifficulty.HARD;
+    };
+    private final PathfinderGoalBreakDoor bm;
+    private boolean bn;
+    private int bo;
+    public int drownedConversionTime;
+    private int lastTick = MinecraftServer.currentTick; // CraftBukkit - add field
+
+    public EntityZombie(EntityTypes<? extends EntityZombie> entitytypes, World world) {
+        super(entitytypes, world);
+        this.bm = new PathfinderGoalBreakDoor(this, EntityZombie.bl);
+    }
+
+    public EntityZombie(World world) {
+        this(EntityTypes.ZOMBIE, world);
+    }
+
+    @Override
+    protected void initPathfinder() {
+        this.goalSelector.a(4, new a(this, 1.0D, 3));
+        this.goalSelector.a(8, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 8.0F));
+        this.goalSelector.a(8, new PathfinderGoalRandomLookaround(this));
+        this.m();
+    }
+
+    protected void m() {
+        this.goalSelector.a(2, new PathfinderGoalZombieAttack(this, 1.0D, false));
+        this.goalSelector.a(6, new PathfinderGoalMoveThroughVillage(this, 1.0D, true, 4, this::fp));
+        this.goalSelector.a(7, new PathfinderGoalRandomStrollLand(this, 1.0D));
+        this.targetSelector.a(1, (new PathfinderGoalHurtByTarget(this, new Class[0])).a(EntityPigZombie.class));
+        this.targetSelector.a(2, new PathfinderGoalNearestAttackableTarget<>(this, EntityHuman.class, true));
+        if ( world.spigotConfig.zombieAggressiveTowardsVillager ) this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget<>(this, EntityVillagerAbstract.class, false)); // Spigot
+        this.targetSelector.a(3, new PathfinderGoalNearestAttackableTarget<>(this, EntityIronGolem.class, true));
+        this.targetSelector.a(5, new PathfinderGoalNearestAttackableTarget<>(this, EntityTurtle.class, 10, true, false, EntityTurtle.bj));
+    }
+
+    public static AttributeProvider.Builder fn() {
+        return EntityMonster.fm().a(GenericAttributes.FOLLOW_RANGE, 35.0D).a(GenericAttributes.MOVEMENT_SPEED, 0.23000000417232513D).a(GenericAttributes.ATTACK_DAMAGE, 3.0D).a(GenericAttributes.ARMOR, 2.0D).a(GenericAttributes.SPAWN_REINFORCEMENTS);
+    }
+
+    @Override
+    protected void initDatawatcher() {
+        super.initDatawatcher();
+        this.getDataWatcher().register(EntityZombie.d, false);
+        this.getDataWatcher().register(EntityZombie.bj, 0);
+        this.getDataWatcher().register(EntityZombie.DROWN_CONVERTING, false);
+    }
+
+    public boolean isDrownConverting() {
+        return (Boolean) this.getDataWatcher().get(EntityZombie.DROWN_CONVERTING);
+    }
+
+    public boolean fp() {
+        return this.bn;
+    }
+
+    public void u(boolean flag) {
+        if (this.ff() && PathfinderGoalUtil.a(this)) {
+            if (this.bn != flag) {
+                this.bn = flag;
+                ((Navigation) this.getNavigation()).a(flag);
+                if (flag) {
+                    this.goalSelector.a(1, this.bm);
+                } else {
+                    this.goalSelector.a((PathfinderGoal) this.bm);
+                }
+            }
+        } else if (this.bn) {
+            this.goalSelector.a((PathfinderGoal) this.bm);
+            this.bn = false;
+        }
+
+    }
+
+    protected boolean ff() {
+        return true;
+    }
+
+    @Override
+    public boolean isBaby() {
+        return (Boolean) this.getDataWatcher().get(EntityZombie.d);
+    }
+
+    @Override
+    protected int getExpValue(EntityHuman entityhuman) {
+        if (this.isBaby()) {
+            this.f = (int) ((float) this.f * 2.5F);
+        }
+
+        return super.getExpValue(entityhuman);
+    }
+
+    @Override
+    public void setBaby(boolean flag) {
+        this.getDataWatcher().set(EntityZombie.d, flag);
+        if (this.world != null && !this.world.isClientSide) {
+            AttributeModifiable attributemodifiable = this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED);
+
+            attributemodifiable.removeModifier(EntityZombie.c);
+            if (flag) {
+                attributemodifiable.b(EntityZombie.c);
+            }
+        }
+
+    }
+
+    @Override
+    public void a(DataWatcherObject<?> datawatcherobject) {
+        if (EntityZombie.d.equals(datawatcherobject)) {
+            this.updateSize();
+        }
+
+        super.a(datawatcherobject);
+    }
+
+    protected boolean fi() {
+        return true;
+    }
+
+    @Override
+    public void tick() {
+        if (!this.world.isClientSide && this.isAlive() && !this.isNoAI()) {
+            if (this.isDrownConverting()) {
+                // CraftBukkit start - Use wall time instead of ticks for conversion
+                int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+                this.drownedConversionTime -= elapsedTicks;
+                // CraftBukkit end
+                if (this.drownedConversionTime < 0) {
+                    this.fk();
+                }
+            } else if (this.fi()) {
+                if (this.a((Tag) TagsFluid.WATER)) {
+                    ++this.bo;
+                    if (this.bo >= 600) {
+                        this.startDrownedConversion(300);
+                    }
+                } else {
+                    this.bo = -1;
+                }
+            }
+        }
+
+        super.tick();
+        this.lastTick = MinecraftServer.currentTick; // CraftBukkit
+    }
+
+    @Override
+    public void movementTick() {
+        if (this.isAlive()) {
+            boolean flag = this.T_() && this.fb();
+
+            if (flag) {
+                ItemStack itemstack = this.getEquipment(EnumItemSlot.HEAD);
+
+                if (!itemstack.isEmpty()) {
+                    if (itemstack.f()) {
+                        itemstack.setDamage(itemstack.getDamage() + this.random.nextInt(2));
+                        if (itemstack.getDamage() >= itemstack.i()) {
+                            this.broadcastItemBreak(EnumItemSlot.HEAD);
+                            this.setSlot(EnumItemSlot.HEAD, ItemStack.b);
+                        }
+                    }
+
+                    flag = false;
+                }
+
+                if (flag) {
+                    this.setOnFire(8);
+                }
+            }
+        }
+
+        super.movementTick();
+    }
+
+    public void startDrownedConversion(int i) {
+        this.lastTick = MinecraftServer.currentTick; // CraftBukkit
+        this.drownedConversionTime = i;
+        this.getDataWatcher().set(EntityZombie.DROWN_CONVERTING, true);
+    }
+
+    protected void fk() {
+        this.b(EntityTypes.DROWNED);
+        if (!this.isSilent()) {
+            this.world.a((EntityHuman) null, 1040, this.getChunkCoordinates(), 0);
+        }
+
+    }
+
+    protected void b(EntityTypes<? extends EntityZombie> entitytypes) {
+        EntityZombie entityzombie = (EntityZombie) this.a(entitytypes, true, EntityTransformEvent.TransformReason.DROWNED, CreatureSpawnEvent.SpawnReason.DROWNED);
+
+        if (entityzombie != null) {
+            entityzombie.y(entityzombie.world.getDamageScaler(entityzombie.getChunkCoordinates()).d());
+            entityzombie.u(entityzombie.ff() && this.fp());
+        }
+        else { ((Zombie) getBukkitEntity()).setConversionTime(-1); } // CraftBukkit - SPIGOT-5208: End conversion to stop event spam
+
+    }
+
+    protected boolean T_() {
+        return true;
+    }
+
+    @Override
+    public boolean damageEntity(DamageSource damagesource, float f) {
+        if (!super.damageEntity(damagesource, f)) {
+            return false;
+        } else if (!(this.world instanceof WorldServer)) {
+            return false;
+        } else {
+            WorldServer worldserver = (WorldServer) this.world;
+            EntityLiving entityliving = this.getGoalTarget();
+
+            if (entityliving == null && damagesource.getEntity() instanceof EntityLiving) {
+                entityliving = (EntityLiving) damagesource.getEntity();
+            }
+
+            if (entityliving != null && this.world.getDifficulty() == EnumDifficulty.HARD && (double) this.random.nextFloat() < this.b(GenericAttributes.SPAWN_REINFORCEMENTS) && this.world.getGameRules().getBoolean(GameRules.DO_MOB_SPAWNING)) {
+                int i = MathHelper.floor(this.locX());
+                int j = MathHelper.floor(this.locY());
+                int k = MathHelper.floor(this.locZ());
+                EntityZombie entityzombie = new EntityZombie(this.world);
+
+                for (int l = 0; l < 50; ++l) {
+                    int i1 = i + MathHelper.nextInt(this.random, 7, 40) * MathHelper.nextInt(this.random, -1, 1);
+                    int j1 = j + MathHelper.nextInt(this.random, 7, 40) * MathHelper.nextInt(this.random, -1, 1);
+                    int k1 = k + MathHelper.nextInt(this.random, 7, 40) * MathHelper.nextInt(this.random, -1, 1);
+                    BlockPosition blockposition = new BlockPosition(i1, j1, k1);
+                    EntityTypes<?> entitytypes = entityzombie.getEntityType();
+                    EntityPositionTypes.Surface entitypositiontypes_surface = EntityPositionTypes.a(entitytypes);
+
+                    if (SpawnerCreature.a(entitypositiontypes_surface, (IWorldReader) this.world, blockposition, entitytypes) && EntityPositionTypes.a(entitytypes, worldserver, EnumMobSpawn.REINFORCEMENT, blockposition, this.world.random)) {
+                        entityzombie.setPosition((double) i1, (double) j1, (double) k1);
+                        if (!this.world.isPlayerNearby((double) i1, (double) j1, (double) k1, 7.0D) && this.world.f((Entity) entityzombie) && this.world.g((Entity) entityzombie) && !this.world.containsLiquid(entityzombie.getBoundingBox())) {
+                            entityzombie.setGoalTarget(entityliving, EntityTargetEvent.TargetReason.REINFORCEMENT_TARGET, true); // CraftBukkit
+                            entityzombie.prepare(worldserver, this.world.getDamageScaler(entityzombie.getChunkCoordinates()), EnumMobSpawn.REINFORCEMENT, (GroupDataEntity) null, (NBTTagCompound) null);
+                            worldserver.addAllEntities(entityzombie, CreatureSpawnEvent.SpawnReason.REINFORCEMENTS); // CraftBukkit
+                            this.getAttributeInstance(GenericAttributes.SPAWN_REINFORCEMENTS).addModifier(new AttributeModifier("Zombie reinforcement caller charge", -0.05000000074505806D, AttributeModifier.Operation.ADDITION));
+                            entityzombie.getAttributeInstance(GenericAttributes.SPAWN_REINFORCEMENTS).addModifier(new AttributeModifier("Zombie reinforcement callee charge", -0.05000000074505806D, AttributeModifier.Operation.ADDITION));
+                            break;
+                        }
+                    }
+                }
+            }
+
+            return true;
+        }
+    }
+
+    @Override
+    public boolean attackEntity(Entity entity) {
+        boolean flag = super.attackEntity(entity);
+
+        if (flag) {
+            float f = this.world.getDamageScaler(this.getChunkCoordinates()).b();
+
+            if (this.getItemInMainHand().isEmpty() && this.isBurning() && this.random.nextFloat() < f * 0.3F) {
+                // CraftBukkit start
+                EntityCombustByEntityEvent event = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 2 * (int) f); // PAIL: fixme
+                this.world.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled()) {
+                    entity.setOnFire(event.getDuration(), false);
+                }
+                // CraftBukkit end
+            }
+        }
+
+        return flag;
+    }
+
+    @Override
+    protected SoundEffect getSoundAmbient() {
+        return SoundEffects.ZOMBIE_AMBIENT;
+    }
+
+    @Override
+    protected SoundEffect getSoundHurt(DamageSource damagesource) {
+        return SoundEffects.ZOMBIE_HURT;
+    }
+
+    @Override
+    protected SoundEffect getSoundDeath() {
+        return SoundEffects.ZOMBIE_DEATH;
+    }
+
+    protected SoundEffect getSoundStep() {
+        return SoundEffects.ZOMBIE_STEP;
+    }
+
+    @Override
+    protected void b(BlockPosition blockposition, IBlockData iblockdata) {
+        this.playSound(this.getSoundStep(), 0.15F, 1.0F);
+    }
+
+    @Override
+    public EnumMonsterType getMonsterType() {
+        return EnumMonsterType.UNDEAD;
+    }
+
+    @Override
+    protected void a(DifficultyDamageScaler difficultydamagescaler) {
+        super.a(difficultydamagescaler);
+        if (this.random.nextFloat() < (this.world.getDifficulty() == EnumDifficulty.HARD ? 0.05F : 0.01F)) {
+            int i = this.random.nextInt(3);
+
+            if (i == 0) {
+                this.setSlot(EnumItemSlot.MAINHAND, new ItemStack(Items.IRON_SWORD));
+            } else {
+                this.setSlot(EnumItemSlot.MAINHAND, new ItemStack(Items.IRON_SHOVEL));
+            }
+        }
+
+    }
+
+    @Override
+    public void saveData(NBTTagCompound nbttagcompound) {
+        super.saveData(nbttagcompound);
+        nbttagcompound.setBoolean("IsBaby", this.isBaby());
+        nbttagcompound.setBoolean("CanBreakDoors", this.fp());
+        nbttagcompound.setInt("InWaterTime", this.isInWater() ? this.bo : -1);
+        nbttagcompound.setInt("DrownedConversionTime", this.isDrownConverting() ? this.drownedConversionTime : -1);
+    }
+
+    @Override
+    public void loadData(NBTTagCompound nbttagcompound) {
+        super.loadData(nbttagcompound);
+        this.setBaby(nbttagcompound.getBoolean("IsBaby"));
+        this.u(nbttagcompound.getBoolean("CanBreakDoors"));
+        this.bo = nbttagcompound.getInt("InWaterTime");
+        if (nbttagcompound.hasKeyOfType("DrownedConversionTime", 99) && nbttagcompound.getInt("DrownedConversionTime") > -1) {
+            this.startDrownedConversion(nbttagcompound.getInt("DrownedConversionTime"));
+        }
+
+    }
+
+    @Override
+    public void a(WorldServer worldserver, EntityLiving entityliving) {
+        super.a(worldserver, entityliving);
+        if ((worldserver.getDifficulty() == EnumDifficulty.NORMAL || worldserver.getDifficulty() == EnumDifficulty.HARD) && entityliving instanceof EntityVillager) {
+            if (worldserver.getDifficulty() != EnumDifficulty.HARD && this.random.nextBoolean()) {
+                return;
+            }
+
+            EntityVillager entityvillager = (EntityVillager) entityliving;
+            // CraftBukkit start
+            EntityZombieVillager entityzombievillager = (EntityZombieVillager) entityvillager.a(EntityTypes.ZOMBIE_VILLAGER, false, EntityTransformEvent.TransformReason.INFECTION, CreatureSpawnEvent.SpawnReason.INFECTION);
+            if (entityzombievillager == null) {
+                return;
+            }
+            // CraftBukkit end
+
+            entityzombievillager.prepare(worldserver, worldserver.getDamageScaler(entityzombievillager.getChunkCoordinates()), EnumMobSpawn.CONVERSION, new GroupDataZombie(false, true), (NBTTagCompound) null);
+            entityzombievillager.setVillagerData(entityvillager.getVillagerData());
+            entityzombievillager.a((NBTBase) entityvillager.fE().a((DynamicOps) DynamicOpsNBT.a).getValue());
+            entityzombievillager.setOffers(entityvillager.getOffers().a());
+            entityzombievillager.a(entityvillager.getExperience());
+            if (!this.isSilent()) {
+                worldserver.a((EntityHuman) null, 1026, this.getChunkCoordinates(), 0);
+            }
+        }
+
+    }
+
+    @Override
+    protected float b(EntityPose entitypose, EntitySize entitysize) {
+        return this.isBaby() ? 0.93F : 1.74F;
+    }
+
+    @Override
+    public boolean canPickup(ItemStack itemstack) {
+        return itemstack.a(Items.EGG) && this.isBaby() && this.isPassenger() ? false : super.canPickup(itemstack);
+    }
+
+    @Nullable
+    @Override
+    public GroupDataEntity prepare(WorldAccess worldaccess, DifficultyDamageScaler difficultydamagescaler, EnumMobSpawn enummobspawn, @Nullable GroupDataEntity groupdataentity, @Nullable NBTTagCompound nbttagcompound) {
+        Object object = super.prepare(worldaccess, difficultydamagescaler, enummobspawn, groupdataentity, nbttagcompound);
+        float f = difficultydamagescaler.d();
+
+        this.setCanPickupLoot(this.random.nextFloat() < 0.55F * f);
+        if (object == null) {
+            object = new GroupDataZombie(a(worldaccess.getRandom()), true);
+        }
+
+        if (object instanceof GroupDataZombie) {
+            GroupDataZombie entityzombie_groupdatazombie = (GroupDataZombie) object;
+
+            if (entityzombie_groupdatazombie.a) {
+                this.setBaby(true);
+                if (entityzombie_groupdatazombie.b) {
+                    if ((double) worldaccess.getRandom().nextFloat() < 0.05D) {
+                        List<EntityChicken> list = worldaccess.a(EntityChicken.class, this.getBoundingBox().grow(5.0D, 3.0D, 5.0D), IEntitySelector.c);
+
+                        if (!list.isEmpty()) {
+                            EntityChicken entitychicken = (EntityChicken) list.get(0);
+
+                            entitychicken.setChickenJockey(true);
+                            this.startRiding(entitychicken);
+                        }
+                    } else if ((double) worldaccess.getRandom().nextFloat() < 0.05D) {
+                        EntityChicken entitychicken1 = (EntityChicken) EntityTypes.CHICKEN.a(this.world);
+
+                        entitychicken1.setPositionRotation(this.locX(), this.locY(), this.locZ(), this.yaw, 0.0F);
+                        entitychicken1.prepare(worldaccess, difficultydamagescaler, EnumMobSpawn.JOCKEY, (GroupDataEntity) null, (NBTTagCompound) null);
+                        entitychicken1.setChickenJockey(true);
+                        this.startRiding(entitychicken1);
+                        worldaccess.addEntity(entitychicken1, CreatureSpawnEvent.SpawnReason.MOUNT); // CraftBukkit
+                    }
+                }
+            }
+
+            this.u(this.ff() && this.random.nextFloat() < f * 0.1F);
+            this.a(difficultydamagescaler);
+            this.b(difficultydamagescaler);
+        }
+
+        if (this.getEquipment(EnumItemSlot.HEAD).isEmpty()) {
+            LocalDate localdate = LocalDate.now();
+            int i = localdate.get(ChronoField.DAY_OF_MONTH);
+            int j = localdate.get(ChronoField.MONTH_OF_YEAR);
+
+            if (j == 10 && i == 31 && this.random.nextFloat() < 0.25F) {
+                this.setSlot(EnumItemSlot.HEAD, new ItemStack(this.random.nextFloat() < 0.1F ? Blocks.JACK_O_LANTERN : Blocks.CARVED_PUMPKIN));
+                this.dropChanceArmor[EnumItemSlot.HEAD.b()] = 0.0F;
+            }
+        }
+
+        this.y(f);
+        return (GroupDataEntity) object;
+    }
+
+    public static boolean a(Random random) {
+        return random.nextFloat() < 0.05F;
+    }
+
+    protected void y(float f) {
+        this.fq();
+        this.getAttributeInstance(GenericAttributes.KNOCKBACK_RESISTANCE).addModifier(new AttributeModifier("Random spawn bonus", this.random.nextDouble() * 0.05000000074505806D, AttributeModifier.Operation.ADDITION));
+        double d0 = this.random.nextDouble() * 1.5D * (double) f;
+
+        if (d0 > 1.0D) {
+            this.getAttributeInstance(GenericAttributes.FOLLOW_RANGE).addModifier(new AttributeModifier("Random zombie-spawn bonus", d0, AttributeModifier.Operation.MULTIPLY_TOTAL));
+        }
+
+        if (this.random.nextFloat() < f * 0.05F) {
+            this.getAttributeInstance(GenericAttributes.SPAWN_REINFORCEMENTS).addModifier(new AttributeModifier("Leader zombie bonus", this.random.nextDouble() * 0.25D + 0.5D, AttributeModifier.Operation.ADDITION));
+            this.getAttributeInstance(GenericAttributes.MAX_HEALTH).addModifier(new AttributeModifier("Leader zombie bonus", this.random.nextDouble() * 3.0D + 1.0D, AttributeModifier.Operation.MULTIPLY_TOTAL));
+            this.u(this.ff());
+        }
+
+    }
+
+    protected void fq() {
+        this.getAttributeInstance(GenericAttributes.SPAWN_REINFORCEMENTS).setValue(this.random.nextDouble() * 0.10000000149011612D);
+    }
+
+    @Override
+    public double bd() {
+        return this.isBaby() ? 0.0D : -0.45D;
+    }
+
+    @Override
+    protected void dropDeathLoot(DamageSource damagesource, int i, boolean flag) {
+        super.dropDeathLoot(damagesource, i, flag);
+        Entity entity = damagesource.getEntity();
+
+        if (entity instanceof EntityCreeper) {
+            EntityCreeper entitycreeper = (EntityCreeper) entity;
+
+            if (entitycreeper.canCauseHeadDrop()) {
+                ItemStack itemstack = this.fh();
+
+                if (!itemstack.isEmpty()) {
+                    entitycreeper.setCausedHeadDrop();
+                    this.a(itemstack);
+                }
+            }
+        }
+
+    }
+
+    protected ItemStack fh() {
+        return new ItemStack(Items.ZOMBIE_HEAD);
+    }
+
+    class a extends PathfinderGoalRemoveBlock {
+
+        a(EntityCreature entitycreature, double d0, int i) {
+            super(Blocks.TURTLE_EGG, entitycreature, d0, i);
+        }
+
+        @Override
+        public void a(GeneratorAccess generatoraccess, BlockPosition blockposition) {
+            generatoraccess.playSound((EntityHuman) null, blockposition, SoundEffects.ZOMBIE_DESTROY_EGG, SoundCategory.HOSTILE, 0.5F, 0.9F + EntityZombie.this.random.nextFloat() * 0.2F);
+        }
+
+        @Override
+        public void a(World world, BlockPosition blockposition) {
+            world.playSound((EntityHuman) null, blockposition, SoundEffects.TURTLE_EGG_BREAK, SoundCategory.BLOCKS, 0.7F, 0.9F + world.random.nextFloat() * 0.2F);
+        }
+
+        @Override
+        public double h() {
+            return 1.14D;
+        }
+    }
+
+    public static class GroupDataZombie implements GroupDataEntity {
+
+        public final boolean a;
+        public final boolean b;
+
+        public GroupDataZombie(boolean flag, boolean flag1) {
+            this.a = flag;
+            this.b = flag1;
+        }
+    }
+}
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 3ecd5c3d..d8678f2c 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -230,4 +230,11 @@ public class SpigotWorldConfig
         tridentDespawnRate = getInt( "trident-despawn-rate", arrowDespawnRate  );
         log( "Arrow Despawn Rate: " + arrowDespawnRate + " Trident Respawn Rate:" + tridentDespawnRate );
     }
+
+    public boolean zombieAggressiveTowardsVillager;
+    private void zombieAggressiveTowardsVillager()
+    {
+        zombieAggressiveTowardsVillager = getBoolean( "zombie-aggressive-towards-villager", true );
+        log( "Zombie Aggressive Towards Villager: " + zombieAggressiveTowardsVillager );
+    }
 }
-- 
2.21.0.windows.1

