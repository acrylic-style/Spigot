From 9e78065278f216ae84d67f713f5d79ca13af45cd Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Tue, 9 Jul 2019 02:18:54 -0700
Subject: [PATCH] Remove DataWatcher Locking

The lock in DataWatcher is used to prevent concurrent modifications,
however any modifications to this map only occur on initialization of
an Entity in its constructor.

Every other access is through a readlock, which allows the threads to
pass if there is no thread holding the writelock.

Since the writelock is only obtained in the constructor of the Entity,
the further readlocks are actually useless.

This patch also changes the entries map to be fastutil
int2objectopenhashmap for performance.

diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
new file mode 100644
index 00000000..e51a15fa
--- /dev/null
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -0,0 +1,304 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import io.netty.handler.codec.DecoderException;
+import io.netty.handler.codec.EncoderException;
+import org.apache.commons.lang3.ObjectUtils;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import javax.annotation.Nullable;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
+public class DataWatcher {
+
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Map<Class<? extends Entity>, Integer> b = Maps.newHashMap();
+    private final Entity entity;
+    private final it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap<DataWatcher.Item<?>> entries = new it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap<>(); // Spigot - use better map // PAIL
+    // private final ReadWriteLock lock = new ReentrantReadWriteLock(); // Spigot - not required
+    private boolean f = true;
+    private boolean g;
+
+    public DataWatcher(Entity entity) {
+        this.entity = entity;
+    }
+
+    public static <T> DataWatcherObject<T> a(Class<? extends Entity> oclass, DataWatcherSerializer<T> datawatcherserializer) {
+        if (DataWatcher.LOGGER.isDebugEnabled()) {
+            try {
+                Class<?> oclass1 = Class.forName(Thread.currentThread().getStackTrace()[2].getClassName());
+
+                if (!oclass1.equals(oclass)) {
+                    DataWatcher.LOGGER.debug("defineId called for: {} from {}", oclass, oclass1, new RuntimeException());
+                }
+            } catch (ClassNotFoundException classnotfoundexception) {
+                ;
+            }
+        }
+
+        int i;
+
+        if (DataWatcher.b.containsKey(oclass)) {
+            i = (Integer) DataWatcher.b.get(oclass) + 1;
+        } else {
+            int j = 0;
+            Class oclass2 = oclass;
+
+            while (oclass2 != Entity.class) {
+                oclass2 = oclass2.getSuperclass();
+                if (DataWatcher.b.containsKey(oclass2)) {
+                    j = (Integer) DataWatcher.b.get(oclass2) + 1;
+                    break;
+                }
+            }
+
+            i = j;
+        }
+
+        if (i > 254) {
+            throw new IllegalArgumentException("Data value id is too big with " + i + "! (Max is " + 254 + ")");
+        } else {
+            DataWatcher.b.put(oclass, i);
+            return datawatcherserializer.a(i);
+        }
+    }
+
+    boolean registrationLocked; // Spigot
+    public <T> void register(DataWatcherObject<T> datawatcherobject, T t0) {
+        if (this.registrationLocked) throw new IllegalStateException("Registering datawatcher object after entity initialization"); // Spigot
+        int i = datawatcherobject.a();
+
+        if (i > 254) {
+            throw new IllegalArgumentException("Data value id is too big with " + i + "! (Max is " + 254 + ")");
+        } else if (this.entries.containsKey(i)) {
+            throw new IllegalArgumentException("Duplicate id value for " + i + "!");
+        } else if (DataWatcherRegistry.b(datawatcherobject.b()) < 0) {
+            throw new IllegalArgumentException("Unregistered serializer " + datawatcherobject.b() + " for " + i + "!");
+        } else {
+            this.registerObject(datawatcherobject, t0);
+        }
+    }
+
+    private <T> void registerObject(DataWatcherObject<T> datawatcherobject, T t0) {
+        Item<T> datawatcher_item = new Item<>(datawatcherobject, t0);
+
+        // this.lock.writeLock().lock(); // Spigot - not required
+        this.entries.put(datawatcherobject.a(), datawatcher_item);
+        this.f = false;
+        // this.lock.writeLock().unlock(); // Spigot - not required
+    }
+
+    private <T> Item<T> b(DataWatcherObject<T> datawatcherobject) {
+        // Spigot start
+        /*
+        this.lock.readLock().lock();
+
+        Item datawatcher_item;
+
+        try {
+            datawatcher_item = (Item) this.entries.get(datawatcherobject.a());
+        } catch (Throwable throwable) {
+            CrashReport crashreport = CrashReport.a(throwable, "Getting synched entity data");
+            CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Synched entity data");
+
+            crashreportsystemdetails.a("Data ID", (Object) datawatcherobject);
+            throw new ReportedException(crashreport);
+        } finally {
+            this.lock.readLock().unlock();
+        }
+
+        return datawatcher_item;
+        */
+        return (DataWatcher.Item) this.entries.get(datawatcherobject.a());
+        // Spigot end
+    }
+
+    public <T> T get(DataWatcherObject<T> datawatcherobject) {
+        return this.b(datawatcherobject).b();
+    }
+
+    public <T> void set(DataWatcherObject<T> datawatcherobject, T t0) {
+        Item<T> datawatcher_item = this.b(datawatcherobject);
+
+        if (ObjectUtils.notEqual(t0, datawatcher_item.b())) {
+            datawatcher_item.a(t0);
+            this.entity.a(datawatcherobject);
+            datawatcher_item.a(true);
+            this.g = true;
+        }
+
+    }
+
+    // CraftBukkit start - add method from above
+    public <T> void markDirty(DataWatcherObject<T> datawatcherobject) {
+        this.b(datawatcherobject).a(true);
+        this.g = true;
+    }
+    // CraftBukkit end
+
+    public boolean a() {
+        return this.g;
+    }
+
+    public static void a(List<Item<?>> list, PacketDataSerializer packetdataserializer) {
+        if (list != null) {
+            int i = 0;
+
+            for (int j = list.size(); i < j; ++i) {
+                a(packetdataserializer, (Item) list.get(i));
+            }
+        }
+
+        packetdataserializer.writeByte(255);
+    }
+
+    @Nullable
+    public List<Item<?>> b() {
+        List<Item<?>> list = null;
+
+        if (this.g) {
+            // this.lock.readLock().lock(); // Spigot - not required
+            Iterator iterator = this.entries.values().iterator();
+
+            while (iterator.hasNext()) {
+                Item<?> datawatcher_item = (Item) iterator.next();
+
+                if (datawatcher_item.c()) {
+                    datawatcher_item.a(false);
+                    if (list == null) {
+                        list = Lists.newArrayList();
+                    }
+
+                    list.add(datawatcher_item.d());
+                }
+            }
+
+            // this.lock.readLock().unlock(); // Spigot - not required
+        }
+
+        this.g = false;
+        return list;
+    }
+
+    @Nullable
+    public List<Item<?>> c() {
+        List<Item<?>> list = null;
+
+        // this.lock.readLock().lock(); // Spigot - not required
+
+        Item datawatcher_item;
+
+        for (Iterator iterator = this.entries.values().iterator(); iterator.hasNext(); list.add(datawatcher_item.d())) {
+            datawatcher_item = (Item) iterator.next();
+            if (list == null) {
+                list = Lists.newArrayList();
+            }
+        }
+
+        // this.lock.readLock().unlock(); // Spigot - not required
+        return list;
+    }
+
+    private static <T> void a(PacketDataSerializer packetdataserializer, Item<T> datawatcher_item) {
+        DataWatcherObject<T> datawatcherobject = datawatcher_item.a();
+        int i = DataWatcherRegistry.b(datawatcherobject.b());
+
+        if (i < 0) {
+            throw new EncoderException("Unknown serializer type " + datawatcherobject.b());
+        } else {
+            packetdataserializer.writeByte(datawatcherobject.a());
+            packetdataserializer.d(i);
+            datawatcherobject.b().a(packetdataserializer, datawatcher_item.b());
+        }
+    }
+
+    @Nullable
+    public static List<Item<?>> a(PacketDataSerializer packetdataserializer) {
+        ArrayList arraylist = null;
+
+        short short0;
+
+        while ((short0 = packetdataserializer.readUnsignedByte()) != 255) {
+            if (arraylist == null) {
+                arraylist = Lists.newArrayList();
+            }
+
+            int i = packetdataserializer.i();
+            DataWatcherSerializer<?> datawatcherserializer = DataWatcherRegistry.a(i);
+
+            if (datawatcherserializer == null) {
+                throw new DecoderException("Unknown serializer type " + i);
+            }
+
+            arraylist.add(a(packetdataserializer, short0, datawatcherserializer));
+        }
+
+        return arraylist;
+    }
+
+    private static <T> Item<T> a(PacketDataSerializer packetdataserializer, int i, DataWatcherSerializer<T> datawatcherserializer) {
+        return new Item<>(datawatcherserializer.a(i), datawatcherserializer.a(packetdataserializer));
+    }
+
+    public boolean d() {
+        return this.f;
+    }
+
+    public void e() {
+        this.g = false;
+        // this.lock.readLock().lock(); // Spigot - not required
+        Iterator iterator = this.entries.values().iterator();
+
+        while (iterator.hasNext()) {
+            Item<?> datawatcher_item = (Item) iterator.next();
+
+            datawatcher_item.a(false);
+        }
+
+        // this.lock.readLock().unlock(); // Spigot - not required
+    }
+
+    public static class Item<T> {
+
+        private final DataWatcherObject<T> a;
+        private T b;
+        private boolean c;
+
+        public Item(DataWatcherObject<T> datawatcherobject, T t0) {
+            this.a = datawatcherobject;
+            this.b = t0;
+            this.c = true;
+        }
+
+        public DataWatcherObject<T> a() {
+            return this.a;
+        }
+
+        public void a(T t0) {
+            this.b = t0;
+        }
+
+        public T b() {
+            return this.b;
+        }
+
+        public boolean c() {
+            return this.c;
+        }
+
+        public void a(boolean flag) {
+            this.c = flag;
+        }
+
+        public Item<T> d() {
+            return new Item<>(this.a, this.a.b().a(this.b));
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 11f3896a..c341a78c 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -222,6 +222,7 @@ public abstract class Entity implements INamableTileEntity, EntityAccess, IComma
         this.datawatcher.register(Entity.POSE, EntityPose.STANDING);
         this.datawatcher.register(Entity.AIR_TICKS, 0);
         this.initDatawatcher();
+        this.datawatcher.registrationLocked = true; // Spigot
         this.headHeight = this.getHeadHeight(EntityPose.STANDING, this.size);
     }
 
-- 
2.21.0.windows.1

