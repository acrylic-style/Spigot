From 857351fbfa4e9698901a4de3388452480d9977ed Mon Sep 17 00:00:00 2001
From: md_5 <md_5@live.com.au>
Date: Tue, 5 Aug 2014 17:20:19 +0100
Subject: [PATCH] Watchdog Thread.


diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
new file mode 100644
index 00000000..e380459b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -0,0 +1,688 @@
+package net.minecraft.server;
+
+import com.google.common.base.Strings;
+import com.google.common.collect.Lists;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.GameProfileRepository;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+import com.mojang.datafixers.DataFixer;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.InetAddress;
+import java.net.Proxy;
+import java.nio.charset.StandardCharsets;
+import java.util.Collections;
+import java.util.List;
+import java.util.Locale;
+import java.util.Optional;
+import java.util.function.BooleanSupplier;
+import java.util.regex.Pattern;
+import javax.annotation.Nullable;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+// CraftBukkit start
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.io.IoBuilder;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.SpigotTimings; // Spigot
+import org.bukkit.event.server.ServerCommandEvent;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+// CraftBukkit end
+
+public class DedicatedServer extends MinecraftServer implements IMinecraftServer {
+
+    private static final Logger LOGGER = LogManager.getLogger();
+    private static final Pattern k = Pattern.compile("^[a-fA-F0-9]{40}$");
+    private final List<ServerCommand> serverCommandQueue = Collections.synchronizedList(Lists.newArrayList());
+    private RemoteStatusListener remoteStatusListener;
+    public final RemoteControlCommandListener remoteControlCommandListener;
+    private RemoteControlListener remoteControlListener;
+    public DedicatedServerSettings propertyManager;
+    @Nullable
+    private ServerGUI q;
+    @Nullable
+    private final TextFilter r;
+
+    // CraftBukkit start - Signature changed
+    public DedicatedServer(joptsimple.OptionSet options, DataPackConfiguration datapackconfiguration, Thread thread, IRegistryCustom.Dimension iregistrycustom_dimension, Convertable.ConversionSession convertable_conversionsession, ResourcePackRepository resourcepackrepository, DataPackResources datapackresources, SaveData savedata, DedicatedServerSettings dedicatedserversettings, DataFixer datafixer, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache, WorldLoadListenerFactory worldloadlistenerfactory) {
+        super(options, datapackconfiguration, thread, iregistrycustom_dimension, convertable_conversionsession, savedata, resourcepackrepository, Proxy.NO_PROXY, datafixer, datapackresources, minecraftsessionservice, gameprofilerepository, usercache, worldloadlistenerfactory);
+        // CraftBukkit end
+        this.propertyManager = dedicatedserversettings;
+        this.remoteControlCommandListener = new RemoteControlCommandListener(this);
+        this.r = null;
+    }
+
+    @Override
+    public boolean init() throws IOException {
+        Thread thread = new Thread("Server console handler") {
+            public void run() {
+                // CraftBukkit start
+                if (!org.bukkit.craftbukkit.Main.useConsole) {
+                    return;
+                }
+                jline.console.ConsoleReader bufferedreader = reader;
+
+                // MC-33041, SPIGOT-5538: if System.in is not valid due to javaw, then return
+                try {
+                    System.in.available();
+                } catch (IOException ex) {
+                    return;
+                }
+                // CraftBukkit end
+
+                String s;
+
+                try {
+                    // CraftBukkit start - JLine disabling compatibility
+                    while (!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning()) {
+                        if (org.bukkit.craftbukkit.Main.useJline) {
+                            s = bufferedreader.readLine(">", null);
+                        } else {
+                            s = bufferedreader.readLine();
+                        }
+
+                        // SPIGOT-5220: Throttle if EOF (ctrl^d) or stdin is /dev/null
+                        if (s == null) {
+                            try {
+                                Thread.sleep(50L);
+                            } catch (InterruptedException ex) {
+                                Thread.currentThread().interrupt();
+                            }
+                            continue;
+                        }
+                        if (s.trim().length() > 0) { // Trim to filter lines which are just spaces
+                            DedicatedServer.this.issueCommand(s, DedicatedServer.this.getServerCommandListener());
+                        }
+                        // CraftBukkit end
+                    }
+                } catch (IOException ioexception) {
+                    DedicatedServer.LOGGER.error("Exception handling console input", ioexception);
+                }
+
+            }
+        };
+
+        // CraftBukkit start - TODO: handle command-line logging arguments
+        java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+        global.setUseParentHandlers(false);
+        for (java.util.logging.Handler handler : global.getHandlers()) {
+            global.removeHandler(handler);
+        }
+        global.addHandler(new org.bukkit.craftbukkit.util.ForwardLogHandler());
+
+        final org.apache.logging.log4j.core.Logger logger = ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger());
+        for (org.apache.logging.log4j.core.Appender appender : logger.getAppenders().values()) {
+            if (appender instanceof org.apache.logging.log4j.core.appender.ConsoleAppender) {
+                logger.removeAppender(appender);
+            }
+        }
+
+        new org.bukkit.craftbukkit.util.TerminalConsoleWriterThread(System.out, this.reader).start();
+
+        System.setOut(IoBuilder.forLogger(logger).setLevel(Level.INFO).buildPrintStream());
+        System.setErr(IoBuilder.forLogger(logger).setLevel(Level.WARN).buildPrintStream());
+        // CraftBukkit end
+
+        thread.setDaemon(true);
+        thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(DedicatedServer.LOGGER));
+        thread.start();
+        DedicatedServer.LOGGER.info("Starting minecraft server version {}", SharedConstants.getGameVersion().getName());
+        if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
+            DedicatedServer.LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
+        }
+
+        DedicatedServer.LOGGER.info("Loading properties");
+        DedicatedServerProperties dedicatedserverproperties = this.propertyManager.getProperties();
+
+        if (this.isEmbeddedServer()) {
+            this.a_("127.0.0.1");
+        } else {
+            this.setOnlineMode(dedicatedserverproperties.onlineMode);
+            this.e(dedicatedserverproperties.preventProxyConnections);
+            this.a_(dedicatedserverproperties.serverIp);
+        }
+        // Spigot start
+        this.a((PlayerList) (new DedicatedPlayerList(this, this.customRegistry, this.worldNBTStorage)));
+        org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
+        org.spigotmc.SpigotConfig.registerCommands();
+        // Spigot end
+
+        this.setPVP(dedicatedserverproperties.pvp);
+        this.setAllowFlight(dedicatedserverproperties.allowFlight);
+        this.setResourcePack(dedicatedserverproperties.resourcePack, this.ba());
+        this.setMotd(dedicatedserverproperties.motd);
+        super.setIdleTimeout((Integer) dedicatedserverproperties.playerIdleTimeout.get());
+        this.setForceGamemode(dedicatedserverproperties.enforceWhitelist);
+        // this.saveData.setGameType(dedicatedserverproperties.gamemode); // CraftBukkit - moved to world loading
+        DedicatedServer.LOGGER.info("Default game type: {}", dedicatedserverproperties.gamemode);
+        InetAddress inetaddress = null;
+
+        if (!this.getServerIp().isEmpty()) {
+            inetaddress = InetAddress.getByName(this.getServerIp());
+        }
+
+        if (this.getPort() < 0) {
+            this.setPort(dedicatedserverproperties.serverPort);
+        }
+
+        this.P();
+        DedicatedServer.LOGGER.info("Starting Minecraft server on {}:{}", this.getServerIp().isEmpty() ? "*" : this.getServerIp(), this.getPort());
+
+        try {
+            this.getServerConnection().a(inetaddress, this.getPort());
+        } catch (IOException ioexception) {
+            DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
+            DedicatedServer.LOGGER.warn("The exception was: {}", ioexception.toString());
+            DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
+            return false;
+        }
+
+        // CraftBukkit start
+        // this.a((PlayerList) (new DedicatedPlayerList(this, this.customRegistry, this.worldNBTStorage))); // Spigot - moved up
+        server.loadPlugins();
+        server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+        // CraftBukkit end
+
+        if (!this.getOnlineMode()) {
+            DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
+            DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
+            DedicatedServer.LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+            DedicatedServer.LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
+        }
+
+        if (this.convertNames()) {
+            this.getUserCache().b();
+        }
+
+        if (!NameReferencingFileConverter.e(this)) {
+            return false;
+        } else {
+            // this.a((PlayerList) (new DedicatedPlayerList(this, this.customRegistry, this.worldNBTStorage))); // CraftBukkit - moved up
+            long i = SystemUtils.getMonotonicNanos();
+
+            TileEntitySkull.a(this.getUserCache());
+            TileEntitySkull.a(this.getMinecraftSessionService());
+            UserCache.a(this.getOnlineMode());
+            DedicatedServer.LOGGER.info("Preparing level \"{}\"", this.getWorld());
+            this.loadWorld(convertable.getLevelName()); // CraftBukkit
+            long j = SystemUtils.getMonotonicNanos() - i;
+            String s = String.format(Locale.ROOT, "%.3fs", (double) j / 1.0E9D);
+
+            DedicatedServer.LOGGER.info("Done ({})! For help, type \"help\"", s);
+            if (dedicatedserverproperties.announcePlayerAchievements != null) {
+                ((GameRules.GameRuleBoolean) this.getGameRules().get(GameRules.ANNOUNCE_ADVANCEMENTS)).a(dedicatedserverproperties.announcePlayerAchievements, (MinecraftServer) this);
+            }
+
+            if (dedicatedserverproperties.enableQuery) {
+                DedicatedServer.LOGGER.info("Starting GS4 status listener");
+                this.remoteStatusListener = RemoteStatusListener.a((IMinecraftServer) this);
+            }
+
+            if (dedicatedserverproperties.enableRcon) {
+                DedicatedServer.LOGGER.info("Starting remote control listener");
+                this.remoteControlListener = RemoteControlListener.a((IMinecraftServer) this);
+                this.remoteConsole = new org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender(this.remoteControlCommandListener); // CraftBukkit
+            }
+
+            if (false && this.getMaxTickTime() > 0L) {  // Spigot - disable
+                Thread thread1 = new Thread(new ThreadWatchdog(this));
+
+                thread1.setUncaughtExceptionHandler(new ThreadNamedUncaughtExceptionHandler(DedicatedServer.LOGGER));
+                thread1.setName("Server Watchdog");
+                thread1.setDaemon(true);
+                thread1.start();
+            }
+
+            Items.AIR.a(CreativeModeTab.g, NonNullList.a());
+            if (dedicatedserverproperties.enableJmxMonitoring) {
+                MinecraftServerBeans.a((MinecraftServer) this);
+                DedicatedServer.LOGGER.info("JMX monitoring enabled");
+            }
+
+            return true;
+        }
+    }
+
+    @Override
+    public boolean getSpawnAnimals() {
+        return this.getDedicatedServerProperties().spawnAnimals && super.getSpawnAnimals();
+    }
+
+    @Override
+    public boolean getSpawnMonsters() {
+        return this.propertyManager.getProperties().spawnMonsters && super.getSpawnMonsters();
+    }
+
+    @Override
+    public boolean getSpawnNPCs() {
+        return this.propertyManager.getProperties().spawnNpcs && super.getSpawnNPCs();
+    }
+
+    public String ba() {
+        DedicatedServerProperties dedicatedserverproperties = this.propertyManager.getProperties();
+        String s;
+
+        if (!dedicatedserverproperties.resourcePackSha1.isEmpty()) {
+            s = dedicatedserverproperties.resourcePackSha1;
+            if (!Strings.isNullOrEmpty(dedicatedserverproperties.resourcePackHash)) {
+                DedicatedServer.LOGGER.warn("resource-pack-hash is deprecated and found along side resource-pack-sha1. resource-pack-hash will be ignored.");
+            }
+        } else if (!Strings.isNullOrEmpty(dedicatedserverproperties.resourcePackHash)) {
+            DedicatedServer.LOGGER.warn("resource-pack-hash is deprecated. Please use resource-pack-sha1 instead.");
+            s = dedicatedserverproperties.resourcePackHash;
+        } else {
+            s = "";
+        }
+
+        if (!s.isEmpty() && !DedicatedServer.k.matcher(s).matches()) {
+            DedicatedServer.LOGGER.warn("Invalid sha1 for ressource-pack-sha1");
+        }
+
+        if (!dedicatedserverproperties.resourcePack.isEmpty() && s.isEmpty()) {
+            DedicatedServer.LOGGER.warn("You specified a resource pack without providing a sha1 hash. Pack will be updated on the client only if you change the name of the pack.");
+        }
+
+        return s;
+    }
+
+    @Override
+    public DedicatedServerProperties getDedicatedServerProperties() {
+        return this.propertyManager.getProperties();
+    }
+
+    @Override
+    public void updateWorldSettings() {
+        this.a(this.getDedicatedServerProperties().difficulty, true);
+    }
+
+    @Override
+    public boolean isHardcore() {
+        return this.getDedicatedServerProperties().hardcore;
+    }
+
+    @Override
+    public CrashReport b(CrashReport crashreport) {
+        crashreport = super.b(crashreport);
+        crashreport.g().a("Is Modded", () -> {
+            return (String) this.getModded().orElse("Unknown (can't tell)");
+        });
+        crashreport.g().a("Type", () -> {
+            return "Dedicated Server (map_server.txt)";
+        });
+        return crashreport;
+    }
+
+    @Override
+    public Optional<String> getModded() {
+        String s = this.getServerModName();
+
+        return !"vanilla".equals(s) ? Optional.of("Definitely; Server brand changed to '" + s + "'") : Optional.empty();
+    }
+
+    @Override
+    public void exit() {
+        if (this.r != null) {
+            this.r.close();
+        }
+
+        if (this.q != null) {
+            this.q.b();
+        }
+
+        if (this.remoteControlListener != null) {
+            this.remoteControlListener.b();
+        }
+
+        if (this.remoteStatusListener != null) {
+            this.remoteStatusListener.b();
+        }
+
+        System.exit(0); // CraftBukkit
+    }
+
+    @Override
+    public void b(BooleanSupplier booleansupplier) {
+        super.b(booleansupplier);
+        this.handleCommandQueue();
+    }
+
+    @Override
+    public boolean getAllowNether() {
+        return this.getDedicatedServerProperties().allowNether;
+    }
+
+    @Override
+    public void a(EntityListener entitylistener) {
+        entitylistener.a("whitelist_enabled", this.getPlayerList().getHasWhitelist());
+        entitylistener.a("whitelist_count", this.getPlayerList().getWhitelisted().length);
+        super.a(entitylistener);
+    }
+
+    public void issueCommand(String s, CommandListenerWrapper commandlistenerwrapper) {
+        this.serverCommandQueue.add(new ServerCommand(s, commandlistenerwrapper));
+    }
+
+    public void handleCommandQueue() {
+        SpigotTimings.serverCommandTimer.startTiming(); // Spigot
+        while (!this.serverCommandQueue.isEmpty()) {
+            ServerCommand servercommand = (ServerCommand) this.serverCommandQueue.remove(0);
+
+            // CraftBukkit start - ServerCommand for preprocessing
+            ServerCommandEvent event = new ServerCommandEvent(console, servercommand.command);
+            server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) continue;
+            servercommand = new ServerCommand(event.getCommand(), servercommand.source);
+
+            // this.getCommandDispatcher().a(servercommand.source, servercommand.command); // Called in dispatchServerCommand
+            server.dispatchServerCommand(console, servercommand);
+            // CraftBukkit end
+        }
+
+        SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
+    }
+
+    @Override
+    public boolean j() {
+        return true;
+    }
+
+    @Override
+    public int k() {
+        return this.getDedicatedServerProperties().rateLimit;
+    }
+
+    @Override
+    public boolean l() {
+        return this.getDedicatedServerProperties().useNativeTransport;
+    }
+
+    @Override
+    public DedicatedPlayerList getPlayerList() {
+        return (DedicatedPlayerList) super.getPlayerList();
+    }
+
+    @Override
+    public boolean n() {
+        return true;
+    }
+
+    @Override
+    public String h_() {
+        return this.getServerIp();
+    }
+
+    @Override
+    public int p() {
+        return this.getPort();
+    }
+
+    @Override
+    public String i_() {
+        return this.getMotd();
+    }
+
+    public void bd() {
+        if (this.q == null) {
+            this.q = ServerGUI.a(this);
+        }
+
+    }
+
+    @Override
+    public boolean ag() {
+        return this.q != null;
+    }
+
+    @Override
+    public boolean getEnableCommandBlock() {
+        return this.getDedicatedServerProperties().enableCommandBlock;
+    }
+
+    @Override
+    public int getSpawnProtection() {
+        return this.getDedicatedServerProperties().spawnProtection;
+    }
+
+    @Override
+    public boolean a(WorldServer worldserver, BlockPosition blockposition, EntityHuman entityhuman) {
+        if (worldserver.getDimensionKey() != World.OVERWORLD) {
+            return false;
+        } else if (this.getPlayerList().getOPs().isEmpty()) {
+            return false;
+        } else if (this.getPlayerList().isOp(entityhuman.getProfile())) {
+            return false;
+        } else if (this.getSpawnProtection() <= 0) {
+            return false;
+        } else {
+            BlockPosition blockposition1 = worldserver.getSpawn();
+            int i = MathHelper.a(blockposition.getX() - blockposition1.getX());
+            int j = MathHelper.a(blockposition.getZ() - blockposition1.getZ());
+            int k = Math.max(i, j);
+
+            return k <= this.getSpawnProtection();
+        }
+    }
+
+    @Override
+    public boolean ak() {
+        return this.getDedicatedServerProperties().enableStatus;
+    }
+
+    @Override
+    public int g() {
+        return this.getDedicatedServerProperties().opPermissionLevel;
+    }
+
+    @Override
+    public int h() {
+        return this.getDedicatedServerProperties().functionPermissionLevel;
+    }
+
+    @Override
+    public void setIdleTimeout(int i) {
+        super.setIdleTimeout(i);
+        this.propertyManager.setProperty((dedicatedserverproperties) -> {
+            return (DedicatedServerProperties) dedicatedserverproperties.playerIdleTimeout.set(this.getCustomRegistry(), i);
+        });
+    }
+
+    @Override
+    public boolean i() {
+        return this.getDedicatedServerProperties().broadcastRconToOps;
+    }
+
+    @Override
+    public boolean shouldBroadcastCommands() {
+        return this.getDedicatedServerProperties().broadcastConsoleToOps;
+    }
+
+    @Override
+    public int as() {
+        return this.getDedicatedServerProperties().maxWorldSize;
+    }
+
+    @Override
+    public int av() {
+        return this.getDedicatedServerProperties().networkCompressionThreshold;
+    }
+
+    protected boolean convertNames() {
+        boolean flag = false;
+
+        int i;
+
+        for (i = 0; !flag && i <= 2; ++i) {
+            if (i > 0) {
+                DedicatedServer.LOGGER.warn("Encountered a problem while converting the user banlist, retrying in a few seconds");
+                this.bo();
+            }
+
+            flag = NameReferencingFileConverter.a((MinecraftServer) this);
+        }
+
+        boolean flag1 = false;
+
+        for (i = 0; !flag1 && i <= 2; ++i) {
+            if (i > 0) {
+                DedicatedServer.LOGGER.warn("Encountered a problem while converting the ip banlist, retrying in a few seconds");
+                this.bo();
+            }
+
+            flag1 = NameReferencingFileConverter.b((MinecraftServer) this);
+        }
+
+        boolean flag2 = false;
+
+        for (i = 0; !flag2 && i <= 2; ++i) {
+            if (i > 0) {
+                DedicatedServer.LOGGER.warn("Encountered a problem while converting the op list, retrying in a few seconds");
+                this.bo();
+            }
+
+            flag2 = NameReferencingFileConverter.c((MinecraftServer) this);
+        }
+
+        boolean flag3 = false;
+
+        for (i = 0; !flag3 && i <= 2; ++i) {
+            if (i > 0) {
+                DedicatedServer.LOGGER.warn("Encountered a problem while converting the whitelist, retrying in a few seconds");
+                this.bo();
+            }
+
+            flag3 = NameReferencingFileConverter.d(this);
+        }
+
+        boolean flag4 = false;
+
+        for (i = 0; !flag4 && i <= 2; ++i) {
+            if (i > 0) {
+                DedicatedServer.LOGGER.warn("Encountered a problem while converting the player save files, retrying in a few seconds");
+                this.bo();
+            }
+
+            flag4 = NameReferencingFileConverter.a(this);
+        }
+
+        return flag || flag1 || flag2 || flag3 || flag4;
+    }
+
+    private void bo() {
+        try {
+            Thread.sleep(5000L);
+        } catch (InterruptedException interruptedexception) {
+            ;
+        }
+    }
+
+    public long getMaxTickTime() {
+        return this.getDedicatedServerProperties().maxTickTime;
+    }
+
+    @Override
+    public String getPlugins() {
+        // CraftBukkit start - Whole method
+        StringBuilder result = new StringBuilder();
+        org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+
+        result.append(server.getName());
+        result.append(" on Bukkit ");
+        result.append(server.getBukkitVersion());
+
+        if (plugins.length > 0 && server.getQueryPlugins()) {
+            result.append(": ");
+
+            for (int i = 0; i < plugins.length; i++) {
+                if (i > 0) {
+                    result.append("; ");
+                }
+
+                result.append(plugins[i].getDescription().getName());
+                result.append(" ");
+                result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+            }
+        }
+
+        return result.toString();
+        // CraftBukkit end
+    }
+
+    @Override
+    public String executeRemoteCommand(String s) {
+        this.remoteControlCommandListener.clearMessages();
+        this.executeSync(() -> {
+            // CraftBukkit start - fire RemoteServerCommandEvent
+            RemoteServerCommandEvent event = new RemoteServerCommandEvent(remoteConsole, s);
+            server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return;
+            }
+            ServerCommand serverCommand = new ServerCommand(event.getCommand(), remoteControlCommandListener.getWrapper());
+            server.dispatchServerCommand(remoteConsole, serverCommand);
+            // CraftBukkit end
+        });
+        return this.remoteControlCommandListener.getMessages();
+    }
+
+    public void setHasWhitelist(boolean flag) {
+        this.propertyManager.setProperty((dedicatedserverproperties) -> {
+            return (DedicatedServerProperties) dedicatedserverproperties.whiteList.set(this.getCustomRegistry(), flag);
+        });
+    }
+
+    @Override
+    public void stop() {
+        super.stop();
+        SystemUtils.h();
+    }
+
+    @Override
+    public boolean a(GameProfile gameprofile) {
+        return false;
+    }
+
+    @Override
+    public int b(int i) {
+        return this.getDedicatedServerProperties().entityBroadcastRangePercentage * i / 100;
+    }
+
+    @Override
+    public String getWorld() {
+        return this.convertable.getLevelName();
+    }
+
+    @Override
+    public boolean isSyncChunkWrites() {
+        return this.propertyManager.getProperties().syncChunkWrites;
+    }
+
+    @Nullable
+    @Override
+    public ITextFilter a(EntityPlayer entityplayer) {
+        return this.r != null ? this.r.a(entityplayer.getProfile()) : null;
+    }
+
+    @Override
+    public boolean aX() {
+        return this.propertyManager.getProperties().requireResourcePack;
+    }
+
+    @Nullable
+    @Override
+    public EnumGamemode getForceGamemode() {
+        return this.propertyManager.getProperties().forceGamemode ? this.saveData.getGameType() : null;
+    }
+
+    // CraftBukkit start
+    public boolean isDebugging() {
+        return this.getDedicatedServerProperties().debug;
+    }
+
+    @Override
+    public CommandSender getBukkitSender(CommandListenerWrapper wrapper) {
+        return console;
+    }
+    // CraftBukkit end
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 7ab55c05..9d05f1b5 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -843,6 +843,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             } catch (Throwable throwable1) {
                 MinecraftServer.LOGGER.error("Exception stopping the server", throwable1);
             } finally {
+                org.spigotmc.WatchdogThread.doStop(); // Spigot
                 // CraftBukkit start - Restore terminal to original settings
                 try {
                     reader.getTerminal().restore();
@@ -1001,6 +1002,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
 
         this.circularTimer.a(i1 - i);
         this.methodProfiler.exit();
+        org.spigotmc.WatchdogThread.tick(); // Spigot
         SpigotTimings.serverTickTimer.stopTiming(); // Spigot
         org.spigotmc.CustomTimingsHandler.tick(); // Spigot
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index da344124..64a958fe 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1685,7 +1685,7 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean isPrimaryThread() {
-        return Thread.currentThread().equals(console.serverThread) || console.hasStopped(); // All bets are off if we have shut down (e.g. due to watchdog)
+        return Thread.currentThread().equals(console.serverThread) || console.hasStopped() || !org.spigotmc.AsyncCatcher.enabled; // All bets are off if we have shut down (e.g. due to watchdog)
     }
 
     @Override
@@ -2038,6 +2038,11 @@ public final class CraftServer implements Server {
         {
             return org.spigotmc.SpigotConfig.config;
         }
+
+        @Override
+        public void restart() {
+            org.spigotmc.RestartCommand.restart();
+        }
     };
 
     public Spigot spigot()
diff --git a/src/main/java/org/spigotmc/RestartCommand.java b/src/main/java/org/spigotmc/RestartCommand.java
new file mode 100644
index 00000000..e7b953ca
--- /dev/null
+++ b/src/main/java/org/spigotmc/RestartCommand.java
@@ -0,0 +1,130 @@
+package org.spigotmc;
+
+import java.io.File;
+import java.util.List;
+import net.minecraft.server.EntityPlayer;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+public class RestartCommand extends Command
+{
+
+    public RestartCommand(String name)
+    {
+        super( name );
+        this.description = "Restarts the server";
+        this.usageMessage = "/restart";
+        this.setPermission( "bukkit.command.restart" );
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String currentAlias, String[] args)
+    {
+        if ( testPermission( sender ) )
+        {
+            MinecraftServer.getServer().processQueue.add( new Runnable()
+            {
+                @Override
+                public void run()
+                {
+                    restart();
+                }
+            } );
+        }
+        return true;
+    }
+
+    public static void restart()
+    {
+        restart( SpigotConfig.restartScript );
+    }
+
+    private static void restart(final String restartScript)
+    {
+        AsyncCatcher.enabled = false; // Disable async catcher incase it interferes with us
+        try
+        {
+            String[] split = restartScript.split( " " );
+            if ( split.length > 0 && new File( split[0] ).isFile() )
+            {
+                System.out.println( "Attempting to restart with " + restartScript );
+
+                // Disable Watchdog
+                WatchdogThread.doStop();
+
+                // Kick all players
+                for ( EntityPlayer p : (List< EntityPlayer>) MinecraftServer.getServer().getPlayerList().players )
+                {
+                    p.playerConnection.disconnect(SpigotConfig.restartMessage);
+                }
+                // Give the socket a chance to send the packets
+                try
+                {
+                    Thread.sleep( 100 );
+                } catch ( InterruptedException ex )
+                {
+                }
+                // Close the socket so we can rebind with the new process
+                MinecraftServer.getServer().getServerConnection().b();
+
+                // Give time for it to kick in
+                try
+                {
+                    Thread.sleep( 100 );
+                } catch ( InterruptedException ex )
+                {
+                }
+
+                // Actually shutdown
+                try
+                {
+                    MinecraftServer.getServer().close();
+                } catch ( Throwable t )
+                {
+                }
+
+                // This will be done AFTER the server has completely halted
+                Thread shutdownHook = new Thread()
+                {
+                    @Override
+                    public void run()
+                    {
+                        try
+                        {
+                            String os = System.getProperty( "os.name" ).toLowerCase(java.util.Locale.ENGLISH);
+                            if ( os.contains( "win" ) )
+                            {
+                                Runtime.getRuntime().exec( "cmd /c start " + restartScript );
+                            } else
+                            {
+                                Runtime.getRuntime().exec( "sh " + restartScript );
+                            }
+                        } catch ( Exception e )
+                        {
+                            e.printStackTrace();
+                        }
+                    }
+                };
+
+                shutdownHook.setDaemon( true );
+                Runtime.getRuntime().addShutdownHook( shutdownHook );
+            } else
+            {
+                System.out.println( "Startup script '" + SpigotConfig.restartScript + "' does not exist! Stopping server." );
+
+                // Actually shutdown
+                try
+                {
+                    MinecraftServer.getServer().close();
+                } catch ( Throwable t )
+                {
+                }
+            }
+            System.exit( 0 );
+        } catch ( Exception ex )
+        {
+            ex.printStackTrace();
+        }
+    }
+}
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 60d14fa2..37bf0cec 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -200,4 +200,18 @@ public class SpigotConfig
         outdatedClientMessage = transform( getString( "messages.outdated-client", outdatedClientMessage ) );
         outdatedServerMessage = transform( getString( "messages.outdated-server", outdatedServerMessage ) );
     }
+
+    public static int timeoutTime = 60;
+    public static boolean restartOnCrash = true;
+    public static String restartScript = "./start.sh";
+    public static String restartMessage;
+    private static void watchdog()
+    {
+        timeoutTime = getInt( "settings.timeout-time", timeoutTime );
+        restartOnCrash = getBoolean( "settings.restart-on-crash", restartOnCrash );
+        restartScript = getString( "settings.restart-script", restartScript );
+        restartMessage = transform( getString( "messages.restart", "Server is restarting" ) );
+        commands.put( "restart", new RestartCommand( "restart" ) );
+        WatchdogThread.doStart( timeoutTime, restartOnCrash );
+    }
 }
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
new file mode 100644
index 00000000..8b373220
--- /dev/null
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -0,0 +1,127 @@
+package org.spigotmc;
+
+import java.lang.management.ManagementFactory;
+import java.lang.management.MonitorInfo;
+import java.lang.management.ThreadInfo;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+
+public class WatchdogThread extends Thread
+{
+
+    private static WatchdogThread instance;
+    private final long timeoutTime;
+    private final boolean restart;
+    private volatile long lastTick;
+    private volatile boolean stopping;
+
+    private WatchdogThread(long timeoutTime, boolean restart)
+    {
+        super( "Spigot Watchdog Thread" );
+        this.timeoutTime = timeoutTime;
+        this.restart = restart;
+    }
+
+    private static long monotonicMillis()
+    {
+        return System.nanoTime() / 1000000L;
+    }
+
+    public static void doStart(int timeoutTime, boolean restart)
+    {
+        if ( instance == null )
+        {
+            instance = new WatchdogThread( timeoutTime * 1000L, restart );
+            instance.start();
+        }
+    }
+
+    public static void tick()
+    {
+        instance.lastTick = monotonicMillis();
+    }
+
+    public static void doStop()
+    {
+        if ( instance != null )
+        {
+            instance.stopping = true;
+        }
+    }
+
+    @Override
+    public void run()
+    {
+        while ( !stopping )
+        {
+            //
+            if ( lastTick != 0 && monotonicMillis() > lastTick + timeoutTime )
+            {
+                Logger log = Bukkit.getServer().getLogger();
+                log.log( Level.SEVERE, "------------------------------" );
+                log.log( Level.SEVERE, "The server has stopped responding! This is (probably) not a Spigot bug." );
+                log.log( Level.SEVERE, "If you see a plugin in the Server thread dump below, then please report it to that author" );
+                log.log( Level.SEVERE, "\t *Especially* if it looks like HTTP or MySQL operations are occurring" );
+                log.log( Level.SEVERE, "If you see a world save or edit, then it means you did far more than your server can handle at once" );
+                log.log( Level.SEVERE, "\t If this is the case, consider increasing timeout-time in spigot.yml but note that this will replace the crash with LARGE lag spikes" );
+                log.log( Level.SEVERE, "If you are unsure or still think this is a Spigot bug, please report to https://www.spigotmc.org/" );
+                log.log( Level.SEVERE, "Be sure to include ALL relevant console errors and Minecraft crash reports" );
+                log.log( Level.SEVERE, "Spigot version: " + Bukkit.getServer().getVersion() );
+                //
+                log.log( Level.SEVERE, "------------------------------" );
+                log.log( Level.SEVERE, "Server thread dump (Look for plugins here before reporting to Spigot!):" );
+                dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( MinecraftServer.getServer().serverThread.getId(), Integer.MAX_VALUE ), log );
+                log.log( Level.SEVERE, "------------------------------" );
+                //
+                log.log( Level.SEVERE, "Entire Thread Dump:" );
+                ThreadInfo[] threads = ManagementFactory.getThreadMXBean().dumpAllThreads( true, true );
+                for ( ThreadInfo thread : threads )
+                {
+                    dumpThread( thread, log );
+                }
+                log.log( Level.SEVERE, "------------------------------" );
+
+                if ( restart && !MinecraftServer.getServer().hasStopped() )
+                {
+                    RestartCommand.restart();
+                }
+                break;
+            }
+
+            try
+            {
+                sleep( 10000 );
+            } catch ( InterruptedException ex )
+            {
+                interrupt();
+            }
+        }
+    }
+
+    private static void dumpThread(ThreadInfo thread, Logger log)
+    {
+        log.log( Level.SEVERE, "------------------------------" );
+        //
+        log.log( Level.SEVERE, "Current Thread: " + thread.getThreadName() );
+        log.log( Level.SEVERE, "\tPID: " + thread.getThreadId()
+                + " | Suspended: " + thread.isSuspended()
+                + " | Native: " + thread.isInNative()
+                + " | State: " + thread.getThreadState() );
+        if ( thread.getLockedMonitors().length != 0 )
+        {
+            log.log( Level.SEVERE, "\tThread is waiting on monitor(s):" );
+            for ( MonitorInfo monitor : thread.getLockedMonitors() )
+            {
+                log.log( Level.SEVERE, "\t\tLocked on:" + monitor.getLockedStackFrame() );
+            }
+        }
+        log.log( Level.SEVERE, "\tStack:" );
+        //
+        for ( StackTraceElement stack : thread.getStackTrace() )
+        {
+            log.log( Level.SEVERE, "\t\t" + stack );
+        }
+    }
+}
-- 
2.21.0.windows.1

