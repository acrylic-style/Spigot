From 86c7ecc911d9d293a357f88339f4219f290fca44 Mon Sep 17 00:00:00 2001
From: erocs <github@erocs.org>
Date: Sun, 8 Sep 2013 12:06:15 -0700
Subject: [PATCH] Hopper Customisations

Allows editing hopper cooldowns and amount transferred per tick.

diff --git a/src/main/java/net/minecraft/server/TileEntityHopper.java b/src/main/java/net/minecraft/server/TileEntityHopper.java
new file mode 100644
index 00000000..a92eae98
--- /dev/null
+++ b/src/main/java/net/minecraft/server/TileEntityHopper.java
@@ -0,0 +1,520 @@
+package net.minecraft.server;
+
+import java.util.Iterator;
+import java.util.List;
+import java.util.function.BooleanSupplier;
+import java.util.stream.Collectors;
+import java.util.stream.IntStream;
+import javax.annotation.Nullable;
+// CraftBukkit start
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.InventoryMoveItemEvent;
+import org.bukkit.event.inventory.InventoryPickupItemEvent;
+import org.bukkit.inventory.Inventory;
+// CraftBukkit end
+
+public class TileEntityHopper extends TileEntityLootable implements IHopper {
+
+    private NonNullList<ItemStack> items;
+    private int h;
+    private long i;
+
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    @Override
+    public int getMaxStackSize() {
+        return maxStack;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
+    public TileEntityHopper(BlockPosition blockposition, IBlockData iblockdata) {
+        super(TileEntityTypes.HOPPER, blockposition, iblockdata);
+        this.items = NonNullList.a(5, ItemStack.b);
+        this.h = -1;
+    }
+
+    @Override
+    public void load(NBTTagCompound nbttagcompound) {
+        super.load(nbttagcompound);
+        this.items = NonNullList.a(this.getSize(), ItemStack.b);
+        if (!this.c(nbttagcompound)) {
+            ContainerUtil.b(nbttagcompound, this.items);
+        }
+
+        this.h = nbttagcompound.getInt("TransferCooldown");
+    }
+
+    @Override
+    public NBTTagCompound save(NBTTagCompound nbttagcompound) {
+        super.save(nbttagcompound);
+        if (!this.d(nbttagcompound)) {
+            ContainerUtil.a(nbttagcompound, this.items);
+        }
+
+        nbttagcompound.setInt("TransferCooldown", this.h);
+        return nbttagcompound;
+    }
+
+    @Override
+    public int getSize() {
+        return this.items.size();
+    }
+
+    @Override
+    public ItemStack splitStack(int i, int j) {
+        this.e((EntityHuman) null);
+        return ContainerUtil.a(this.f(), i, j);
+    }
+
+    @Override
+    public void setItem(int i, ItemStack itemstack) {
+        this.e((EntityHuman) null);
+        this.f().set(i, itemstack);
+        if (itemstack.getCount() > this.getMaxStackSize()) {
+            itemstack.setCount(this.getMaxStackSize());
+        }
+
+    }
+
+    @Override
+    protected IChatBaseComponent getContainerName() {
+        return new ChatMessage("container.hopper");
+    }
+
+    public static void a(World world, BlockPosition blockposition, IBlockData iblockdata, TileEntityHopper tileentityhopper) {
+        --tileentityhopper.h;
+        tileentityhopper.i = world.getTime();
+        if (!tileentityhopper.j()) {
+            tileentityhopper.setCooldown(0);
+            // Spigot start
+            boolean result = a(world, blockposition, iblockdata, tileentityhopper, () -> {
+                return a(world, (IHopper) tileentityhopper);
+            });
+            if (!result && tileentityhopper.world.spigotConfig.hopperCheck > 1) {
+                tileentityhopper.setCooldown(tileentityhopper.world.spigotConfig.hopperCheck);
+            }
+            // Spigot end
+        }
+
+    }
+
+    private static boolean a(World world, BlockPosition blockposition, IBlockData iblockdata, TileEntityHopper tileentityhopper, BooleanSupplier booleansupplier) {
+        if (world.isClientSide) {
+            return false;
+        } else {
+            if (!tileentityhopper.j() && (Boolean) iblockdata.get(BlockHopper.ENABLED)) {
+                boolean flag = false;
+
+                if (!tileentityhopper.isEmpty()) {
+                    flag = a(world, blockposition, iblockdata, (IInventory) tileentityhopper, tileentityhopper);
+                }
+
+                if (!tileentityhopper.i()) {
+                    flag |= booleansupplier.getAsBoolean();
+                }
+
+                if (flag) {
+                    tileentityhopper.setCooldown(world.spigotConfig.hopperTransfer); // Spigot
+                    a(world, blockposition, iblockdata);
+                    return true;
+                }
+            }
+
+            return false;
+        }
+    }
+
+    private boolean i() {
+        Iterator iterator = this.items.iterator();
+
+        ItemStack itemstack;
+
+        do {
+            if (!iterator.hasNext()) {
+                return true;
+            }
+
+            itemstack = (ItemStack) iterator.next();
+        } while (!itemstack.isEmpty() && itemstack.getCount() == itemstack.getMaxStackSize());
+
+        return false;
+    }
+
+    private static boolean a(World world, BlockPosition blockposition, IBlockData iblockdata, IInventory iinventory, TileEntityHopper tileentityhopper) {
+        IInventory iinventory1 = b(world, blockposition, iblockdata);
+
+        if (iinventory1 == null) {
+            return false;
+        } else {
+            EnumDirection enumdirection = ((EnumDirection) iblockdata.get(BlockHopper.FACING)).opposite();
+
+            if (b(iinventory1, enumdirection)) {
+                return false;
+            } else {
+                for (int i = 0; i < iinventory.getSize(); ++i) {
+                    if (!iinventory.getItem(i).isEmpty()) {
+                        ItemStack itemstack = iinventory.getItem(i).cloneItemStack();
+                        // ItemStack itemstack1 = addItem(iinventory, iinventory1, iinventory.splitStack(i, 1), enumdirection);
+                        // CraftBukkit start - Call event when pushing items into other inventories
+                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.splitStack(i, world.spigotConfig.hopperAmount)); // Spigot
+
+                        Inventory destinationInventory;
+                        // Have to special case large chests as they work oddly
+                        if (iinventory instanceof InventoryLargeChest) {
+                            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) iinventory);
+                        } else {
+                            destinationInventory = iinventory.getOwner().getInventory();
+                        }
+
+                        InventoryMoveItemEvent event = new InventoryMoveItemEvent(iinventory.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
+                        tileentityhopper.getWorld().getServer().getPluginManager().callEvent(event);
+                        if (event.isCancelled()) {
+                            iinventory.setItem(i, itemstack);
+                            tileentityhopper.setCooldown(world.spigotConfig.hopperTransfer); // Spigot
+                            return false;
+                        }
+                        int origCount = event.getItem().getAmount(); // Spigot
+                        ItemStack itemstack1 = addItem(iinventory, iinventory, CraftItemStack.asNMSCopy(event.getItem()), enumdirection);
+                        // CraftBukkit end
+
+                        if (itemstack1.isEmpty()) {
+                            iinventory1.update();
+                            return true;
+                        }
+
+                        itemstack.subtract(origCount - itemstack1.getCount()); // Spigot
+                        iinventory.setItem(i, itemstack);
+                    }
+                }
+
+                return false;
+            }
+        }
+    }
+
+    private static IntStream a(IInventory iinventory, EnumDirection enumdirection) {
+        return iinventory instanceof IWorldInventory ? IntStream.of(((IWorldInventory) iinventory).getSlotsForFace(enumdirection)) : IntStream.range(0, iinventory.getSize());
+    }
+
+    private static boolean b(IInventory iinventory, EnumDirection enumdirection) {
+        return a(iinventory, enumdirection).allMatch((i) -> {
+            ItemStack itemstack = iinventory.getItem(i);
+
+            return itemstack.getCount() >= itemstack.getMaxStackSize();
+        });
+    }
+
+    private static boolean c(IInventory iinventory, EnumDirection enumdirection) {
+        return a(iinventory, enumdirection).allMatch((i) -> {
+            return iinventory.getItem(i).isEmpty();
+        });
+    }
+
+    public static boolean a(World world, IHopper ihopper) {
+        IInventory iinventory = c(world, ihopper);
+
+        if (iinventory != null) {
+            EnumDirection enumdirection = EnumDirection.DOWN;
+
+            return c(iinventory, enumdirection) ? false : a(iinventory, enumdirection).anyMatch((i) -> {
+                return a(ihopper, iinventory, i, enumdirection);
+            });
+        } else {
+            Iterator iterator = b(world, ihopper).iterator();
+
+            EntityItem entityitem;
+
+            do {
+                if (!iterator.hasNext()) {
+                    return false;
+                }
+
+                entityitem = (EntityItem) iterator.next();
+            } while (!a((IInventory) ihopper, entityitem));
+
+            return true;
+        }
+    }
+
+    private static boolean a(IHopper ihopper, IInventory iinventory, int i, EnumDirection enumdirection) {
+        ItemStack itemstack = iinventory.getItem(i);
+
+        if (!itemstack.isEmpty() && b(iinventory, itemstack, i, enumdirection)) {
+            ItemStack itemstack1 = itemstack.cloneItemStack();
+            // ItemStack itemstack2 = addItem(iinventory, ihopper, iinventory.splitStack(i, 1), (EnumDirection) null);
+            // CraftBukkit start - Call event on collection of items from inventories into the hopper
+            World world;
+            if (ihopper instanceof TileEntityHopper) {
+                world = ((TileEntityHopper) ihopper).getWorld();
+            } else if (ihopper instanceof EntityMinecartHopper) {
+                world = ((EntityMinecartHopper) ihopper).getWorld();
+            } else {
+                world = null;
+            }
+            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.splitStack(i, world.spigotConfig.hopperAmount)); // Spigot
+
+            Inventory sourceInventory;
+            // Have to special case large chests as they work oddly
+            if (iinventory instanceof InventoryLargeChest) {
+                sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) iinventory);
+            } else {
+                sourceInventory = iinventory.getOwner().getInventory();
+            }
+
+            InventoryMoveItemEvent event = new InventoryMoveItemEvent(sourceInventory, oitemstack.clone(), ihopper.getOwner().getInventory(), false);
+
+            world.getServer().getPluginManager().callEvent(event); // Spigot
+            if (event.isCancelled()) {
+                iinventory.setItem(i, itemstack1);
+
+                if (ihopper instanceof TileEntityHopper) {
+                    ((TileEntityHopper) ihopper).setCooldown(world.spigotConfig.hopperTransfer); // Spigot
+                } else if (ihopper instanceof EntityMinecartHopper) {
+                    ((EntityMinecartHopper) ihopper).setCooldown(world.spigotConfig.hopperTransfer / 2); // Spigot
+                }
+                return false;
+            }
+            int origCount = event.getItem().getAmount(); // Spigot
+            ItemStack itemstack2 = addItem(iinventory, ihopper, CraftItemStack.asNMSCopy(event.getItem()), null);
+            // CraftBukkit end
+
+            if (itemstack2.isEmpty()) {
+                iinventory.update();
+                return true;
+            }
+
+            itemstack1.subtract(origCount - itemstack2.getCount()); // Spigot
+            iinventory.setItem(i, itemstack1);
+        }
+
+        return false;
+    }
+
+    public static boolean a(IInventory iinventory, EntityItem entityitem) {
+        boolean flag = false;
+        // CraftBukkit start
+        InventoryPickupItemEvent event = new InventoryPickupItemEvent(iinventory.getOwner().getInventory(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+        entityitem.world.getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return false;
+        }
+        // CraftBukkit end
+        ItemStack itemstack = entityitem.getItemStack().cloneItemStack();
+        ItemStack itemstack1 = addItem((IInventory) null, iinventory, itemstack, (EnumDirection) null);
+
+        if (itemstack1.isEmpty()) {
+            flag = true;
+            entityitem.ab();
+        } else {
+            entityitem.setItemStack(itemstack1);
+        }
+
+        return flag;
+    }
+
+    public static ItemStack addItem(@Nullable IInventory iinventory, IInventory iinventory1, ItemStack itemstack, @Nullable EnumDirection enumdirection) {
+        if (iinventory1 instanceof IWorldInventory && enumdirection != null) {
+            IWorldInventory iworldinventory = (IWorldInventory) iinventory1;
+            int[] aint = iworldinventory.getSlotsForFace(enumdirection);
+
+            for (int i = 0; i < aint.length && !itemstack.isEmpty(); ++i) {
+                itemstack = a(iinventory, iinventory1, itemstack, aint[i], enumdirection);
+            }
+        } else {
+            int j = iinventory1.getSize();
+
+            for (int k = 0; k < j && !itemstack.isEmpty(); ++k) {
+                itemstack = a(iinventory, iinventory1, itemstack, k, enumdirection);
+            }
+        }
+
+        return itemstack;
+    }
+
+    private static boolean a(IInventory iinventory, ItemStack itemstack, int i, @Nullable EnumDirection enumdirection) {
+        return !iinventory.b(i, itemstack) ? false : !(iinventory instanceof IWorldInventory) || ((IWorldInventory) iinventory).canPlaceItemThroughFace(i, itemstack, enumdirection);
+    }
+
+    private static boolean b(IInventory iinventory, ItemStack itemstack, int i, EnumDirection enumdirection) {
+        return !(iinventory instanceof IWorldInventory) || ((IWorldInventory) iinventory).canTakeItemThroughFace(i, itemstack, enumdirection);
+    }
+
+    private static ItemStack a(@Nullable IInventory iinventory, IInventory iinventory1, ItemStack itemstack, int i, @Nullable EnumDirection enumdirection) {
+        ItemStack itemstack1 = iinventory1.getItem(i);
+
+        if (a(iinventory1, itemstack, i, enumdirection)) {
+            boolean flag = false;
+            boolean flag1 = iinventory1.isEmpty();
+
+            if (itemstack1.isEmpty()) {
+                iinventory1.setItem(i, itemstack);
+                itemstack = ItemStack.b;
+                flag = true;
+            } else if (a(itemstack1, itemstack)) {
+                int j = itemstack.getMaxStackSize() - itemstack1.getCount();
+                int k = Math.min(itemstack.getCount(), j);
+
+                itemstack.subtract(k);
+                itemstack1.add(k);
+                flag = k > 0;
+            }
+
+            if (flag) {
+                if (flag1 && iinventory1 instanceof TileEntityHopper) {
+                    TileEntityHopper tileentityhopper = (TileEntityHopper) iinventory1;
+
+                    if (!tileentityhopper.k()) {
+                        byte b0 = 0;
+
+                        if (iinventory instanceof TileEntityHopper) {
+                            TileEntityHopper tileentityhopper1 = (TileEntityHopper) iinventory;
+
+                            if (tileentityhopper.i >= tileentityhopper1.i) {
+                                b0 = 1;
+                            }
+                        }
+
+                        tileentityhopper.setCooldown(tileentityhopper.world.spigotConfig.hopperTransfer - b0); // Spigot
+                    }
+                }
+
+                iinventory1.update();
+            }
+        }
+
+        return itemstack;
+    }
+
+    @Nullable
+    private static IInventory b(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        EnumDirection enumdirection = (EnumDirection) iblockdata.get(BlockHopper.FACING);
+
+        return a(world, blockposition.shift(enumdirection));
+    }
+
+    @Nullable
+    private static IInventory c(World world, IHopper ihopper) {
+        return a(world, ihopper.w(), ihopper.x() + 1.0D, ihopper.z());
+    }
+
+    public static List<EntityItem> b(World world, IHopper ihopper) {
+        return (List) ihopper.aa_().d().stream().flatMap((axisalignedbb) -> {
+            return world.a(EntityItem.class, axisalignedbb.d(ihopper.w() - 0.5D, ihopper.x() - 0.5D, ihopper.z() - 0.5D), IEntitySelector.a).stream();
+        }).collect(Collectors.toList());
+    }
+
+    @Nullable
+    public static IInventory a(World world, BlockPosition blockposition) {
+        return a(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D);
+    }
+
+    @Nullable
+    private static IInventory a(World world, double d0, double d1, double d2) {
+        Object object = null;
+        BlockPosition blockposition = new BlockPosition(d0, d1, d2);
+        IBlockData iblockdata = world.getType(blockposition);
+        Block block = iblockdata.getBlock();
+
+        if (block instanceof IInventoryHolder) {
+            object = ((IInventoryHolder) block).a(iblockdata, world, blockposition);
+        } else if (iblockdata.getBlock().isTileEntity()) { // Spigot
+            TileEntity tileentity = world.getTileEntity(blockposition);
+
+            if (tileentity instanceof IInventory) {
+                object = (IInventory) tileentity;
+                if (object instanceof TileEntityChest && block instanceof BlockChest) {
+                    object = BlockChest.getInventory((BlockChest) block, iblockdata, world, blockposition, true);
+                }
+            }
+        }
+
+        if (object == null) {
+            List<Entity> list = world.getEntities((Entity) null, new AxisAlignedBB(d0 - 0.5D, d1 - 0.5D, d2 - 0.5D, d0 + 0.5D, d1 + 0.5D, d2 + 0.5D), IEntitySelector.d);
+
+            if (!list.isEmpty()) {
+                object = (IInventory) list.get(world.random.nextInt(list.size()));
+            }
+        }
+
+        return (IInventory) object;
+    }
+
+    private static boolean a(ItemStack itemstack, ItemStack itemstack1) {
+        return !itemstack.a(itemstack1.getItem()) ? false : (itemstack.getDamage() != itemstack1.getDamage() ? false : (itemstack.getCount() > itemstack.getMaxStackSize() ? false : ItemStack.equals(itemstack, itemstack1)));
+    }
+
+    @Override
+    public double w() {
+        return (double) this.position.getX() + 0.5D;
+    }
+
+    @Override
+    public double x() {
+        return (double) this.position.getY() + 0.5D;
+    }
+
+    @Override
+    public double z() {
+        return (double) this.position.getZ() + 0.5D;
+    }
+
+    private void setCooldown(int i) {
+        this.h = i;
+    }
+
+    private boolean j() {
+        return this.h > 0;
+    }
+
+    private boolean k() {
+        return this.h > 8;
+    }
+
+    @Override
+    protected NonNullList<ItemStack> f() {
+        return this.items;
+    }
+
+    @Override
+    protected void a(NonNullList<ItemStack> nonnulllist) {
+        this.items = nonnulllist;
+    }
+
+    public static void a(World world, BlockPosition blockposition, IBlockData iblockdata, Entity entity, TileEntityHopper tileentityhopper) {
+        if (entity instanceof EntityItem && VoxelShapes.c(VoxelShapes.a(entity.getBoundingBox().d((double) (-blockposition.getX()), (double) (-blockposition.getY()), (double) (-blockposition.getZ()))), tileentityhopper.aa_(), OperatorBoolean.AND)) {
+            a(world, blockposition, iblockdata, tileentityhopper, () -> {
+                return a((IInventory) tileentityhopper, (EntityItem) entity);
+            });
+        }
+
+    }
+
+    @Override
+    protected Container createContainer(int i, PlayerInventory playerinventory) {
+        return new ContainerHopper(i, playerinventory, this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 10fb0a41..6339ae55 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -365,7 +365,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
             }
 
             if (flag) {
-                TileEntity tileentity = iblockdata.isTileEntity() ? this.getTileEntity(blockposition) : null;
+                TileEntity tileentity = iblockdata.getBlock().isTileEntity() ? this.getTileEntity(blockposition) : null;
 
                 Block.dropItems(iblockdata, this, blockposition, tileentity, entity, ItemStack.b);
             }
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 48bda1ed..5b5eacb3 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -205,4 +205,20 @@ public class SpigotWorldConfig
         otherTrackingRange = getInt( "entity-tracking-range.other", otherTrackingRange );
         log( "Entity Tracking Range: Pl " + playerTrackingRange + " / An " + animalTrackingRange + " / Mo " + monsterTrackingRange + " / Mi " + miscTrackingRange + " / Other " + otherTrackingRange );
     }
+
+    public int hopperTransfer;
+    public int hopperCheck;
+    public int hopperAmount;
+    private void hoppers()
+    {
+        // Set the tick delay between hopper item movements
+        hopperTransfer = getInt( "ticks-per.hopper-transfer", 8 );
+        if ( SpigotConfig.version < 11 )
+        {
+            set( "ticks-per.hopper-check", 1 );
+        }
+        hopperCheck = getInt( "ticks-per.hopper-check", 1 );
+        hopperAmount = getInt( "hopper-amount", 1 );
+        log( "Hopper Transfer: " + hopperTransfer + " Hopper Check: " + hopperCheck + " Hopper Amount: " + hopperAmount );
+    }
 }
-- 
2.21.0.windows.1

